[{"/Users/tanjie/WebstormProjects/create1/my-ts/src/Index.tsx":"1","/Users/tanjie/WebstormProjects/create1/my-ts/src/reportWebVitals.ts":"2","/Users/tanjie/WebstormProjects/create1/my-ts/src/App.tsx":"3","/Users/tanjie/WebstormProjects/create1/my-ts/src/router/Index.tsx":"4","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/Login.tsx":"5","/Users/tanjie/WebstormProjects/create1/my-ts/src/index.tsx":"6","/Users/tanjie/WebstormProjects/create1/my-ts/src/router/index.tsx":"7","/Users/tanjie/WebstormProjects/create1/my-ts/src/layouts/index.tsx":"8","/Users/tanjie/WebstormProjects/create1/my-ts/src/layouts/header/index.tsx":"9","/Users/tanjie/WebstormProjects/create1/my-ts/src/components/Test.tsx":"10","/Users/tanjie/WebstormProjects/create1/my-ts/src/layouts/sideMenu/index.tsx":"11","/Users/tanjie/WebstormProjects/create1/my-ts/src/assets/icon/index.ts":"12","/Users/tanjie/WebstormProjects/create1/my-ts/src/components/svgIcon/index.tsx":"13","/Users/tanjie/WebstormProjects/create1/my-ts/src/locales/index.ts":"14","/Users/tanjie/WebstormProjects/create1/my-ts/src/locales/zh/menu.ts":"15","/Users/tanjie/WebstormProjects/create1/my-ts/src/redux/root.ts":"16","/Users/tanjie/WebstormProjects/create1/my-ts/src/redux/models/global.ts":"17","/Users/tanjie/WebstormProjects/create1/my-ts/src/router/menu.ts":"18","/Users/tanjie/WebstormProjects/create1/my-ts/src/assets/icon/all.ts":"19","/Users/tanjie/WebstormProjects/create1/my-ts/src/layouts/header/BreadCrumb.tsx":"20","/Users/tanjie/WebstormProjects/create1/my-ts/src/layouts/footer/index.tsx":"21","/Users/tanjie/WebstormProjects/create1/my-ts/src/layouts/content/index.tsx":"22","/Users/tanjie/WebstormProjects/create1/my-ts/src/components/ProTable/proFormSearch.tsx":"23","/Users/tanjie/WebstormProjects/create1/my-ts/src/utils/responsive.ts":"24","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/ICCard/admin.tsx":"25","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/global.ts":"26","/Users/tanjie/WebstormProjects/create1/my-ts/src/components/ProTable/proTable.tsx":"27","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/ICCard/models/admin.ts":"28","/Users/tanjie/WebstormProjects/create1/my-ts/src/components/ProTable/reducers.ts":"29","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/service.ts":"30","/Users/tanjie/WebstormProjects/create1/my-ts/src/utils/request.ts":"31","/Users/tanjie/WebstormProjects/create1/my-ts/src/error/error404.tsx":"32","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/ClassroomConfig/CampusAndBuilding.tsx":"33","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/ClassroomConfig/ClassroomCategoryEdit.tsx":"34","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/ClassroomConfig/ClassroomEdit.tsx":"35","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/components/ClassroomForm.tsx":"36","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/ClassroomConfig/models/ClassroomEdit.ts":"37","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/PeopleEdit/administrator.tsx":"38","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/PeopleEdit/temporary.tsx":"39","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/PeopleEdit/teacher.tsx":"40","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/PeopleEdit/maintenance.tsx":"41","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/PeopleEdit/student.tsx":"42","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/PeopleEdit/models/administrator.ts":"43","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/PeopleEdit/models/student.ts":"44","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/PeopleEdit/models/maintenance.ts":"45","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/PeopleEdit/models/teacher.ts":"46","/Users/tanjie/WebstormProjects/create1/my-ts/src/utils/time.ts":"47","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/PeopleEdit/models/temporary.ts":"48","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/log/models/SwipeDoor.ts":"49","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/log/models/SwipeEquipment.ts":"50","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/log/SwipeDoor.tsx":"51","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/log/SwipeEquipment.tsx":"52","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/log/swipe.tsx":"53"},{"size":496,"mtime":1611227978043,"results":"54","hashOfConfig":"55"},{"size":425,"mtime":1610538878660,"results":"56","hashOfConfig":"55"},{"size":432,"mtime":1616489047403,"results":"57","hashOfConfig":"55"},{"size":377,"mtime":1611228075540,"results":"58","hashOfConfig":"55"},{"size":4254,"mtime":1613819559830,"results":"59","hashOfConfig":"55"},{"size":496,"mtime":1614871809743,"results":"60","hashOfConfig":"55"},{"size":459,"mtime":1614871127029,"results":"61","hashOfConfig":"55"},{"size":592,"mtime":1617091729215,"results":"62","hashOfConfig":"55"},{"size":1543,"mtime":1617092362070,"results":"63","hashOfConfig":"55"},{"size":253,"mtime":1617091819522,"results":"64","hashOfConfig":"55"},{"size":3197,"mtime":1617247102700,"results":"65","hashOfConfig":"55"},{"size":193,"mtime":1616986949880,"results":"66","hashOfConfig":"55"},{"size":551,"mtime":1616746082509,"results":"67","hashOfConfig":"55"},{"size":111,"mtime":1615194389733,"results":"68","hashOfConfig":"55"},{"size":55,"mtime":1615193900857,"results":"69","hashOfConfig":"55"},{"size":2512,"mtime":1617378220324,"results":"70","hashOfConfig":"55"},{"size":586,"mtime":1617371269789,"results":"71","hashOfConfig":"55"},{"size":3096,"mtime":1617378220315,"results":"72","hashOfConfig":"55"},{"size":407,"mtime":1617088956035,"results":"73","hashOfConfig":"55"},{"size":1697,"mtime":1617091613315,"results":"74","hashOfConfig":"55"},{"size":277,"mtime":1617085990794,"results":"75","hashOfConfig":"55"},{"size":1237,"mtime":1617246816865,"results":"76","hashOfConfig":"55"},{"size":8592,"mtime":1617198241702,"results":"77","hashOfConfig":"55"},{"size":1081,"mtime":1617188030007,"results":"78","hashOfConfig":"55"},{"size":9318,"mtime":1617241056271,"results":"79","hashOfConfig":"55"},{"size":1465,"mtime":1617180440108,"results":"80","hashOfConfig":"55"},{"size":2237,"mtime":1617180440105,"results":"81","hashOfConfig":"55"},{"size":1861,"mtime":1617373292550,"results":"82","hashOfConfig":"55"},{"size":457,"mtime":1617205488416,"results":"83","hashOfConfig":"55"},{"size":7778,"mtime":1617103184817,"results":"84","hashOfConfig":"55"},{"size":2052,"mtime":1617291120904,"results":"85","hashOfConfig":"55"},{"size":639,"mtime":1617247235536,"results":"86","hashOfConfig":"55"},{"size":23157,"mtime":1617364019296,"results":"87","hashOfConfig":"55"},{"size":15373,"mtime":1617364019306,"results":"88","hashOfConfig":"55"},{"size":8849,"mtime":1617365071283,"results":"89","hashOfConfig":"55"},{"size":8648,"mtime":1601019775450,"results":"90","hashOfConfig":"55"},{"size":2485,"mtime":1617371269792,"results":"91","hashOfConfig":"55"},{"size":9994,"mtime":1617374733528,"results":"92","hashOfConfig":"55"},{"size":7978,"mtime":1617375513293,"results":"93","hashOfConfig":"55"},{"size":9091,"mtime":1617375513290,"results":"94","hashOfConfig":"55"},{"size":8082,"mtime":1617374733499,"results":"95","hashOfConfig":"55"},{"size":10803,"mtime":1617375513287,"results":"96","hashOfConfig":"55"},{"size":2040,"mtime":1617375388759,"results":"97","hashOfConfig":"55"},{"size":2224,"mtime":1617375388756,"results":"98","hashOfConfig":"55"},{"size":1775,"mtime":1617375388752,"results":"99","hashOfConfig":"55"},{"size":1988,"mtime":1617375388750,"results":"100","hashOfConfig":"55"},{"size":1207,"mtime":1617373292581,"results":"101","hashOfConfig":"55"},{"size":1763,"mtime":1617375388754,"results":"102","hashOfConfig":"55"},{"size":1669,"mtime":1617378220329,"results":"103","hashOfConfig":"55"},{"size":1652,"mtime":1617378220327,"results":"104","hashOfConfig":"55"},{"size":704,"mtime":1617378354779,"results":"105","hashOfConfig":"55"},{"size":725,"mtime":1617378220322,"results":"106","hashOfConfig":"55"},{"size":10049,"mtime":1617378354777,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"11e577k",{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"113"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"113"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"113"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"113"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"113"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"113"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"113"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"113"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"113"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"113"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"113"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"113"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"113"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"113"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"113"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"113"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"113"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"113"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"113"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"113"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"113"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"232","messages":"233","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"234","messages":"235","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"236","messages":"237","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238"},"/Users/tanjie/WebstormProjects/create1/my-ts/src/Index.tsx",[],["239","240"],"/Users/tanjie/WebstormProjects/create1/my-ts/src/reportWebVitals.ts",[],["241","242"],"/Users/tanjie/WebstormProjects/create1/my-ts/src/App.tsx",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/router/Index.tsx",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/Login.tsx",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/index.tsx",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/router/index.tsx",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/layouts/index.tsx",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/layouts/header/index.tsx",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/components/Test.tsx",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/layouts/sideMenu/index.tsx",["243"],"import React from \"react\";\nimport {Layout, Menu,} from \"antd\";\nimport {connect} from \"react-redux\";\nimport {MenuConfigType} from \"../../router/data\";\nimport menus from \"../../router/menu\";\nimport AllIcon from \"@/assets/icon/all\";\nimport Icon from \"@ant-design/icons\";\nimport {Link} from \"react-router-dom\";\nimport  {GlobalStateType} from \"../../redux/models/global\";\nimport {SiderTheme} from \"antd/lib/layout/Sider\";\nimport {Dispatch} from \"redux\";\nimport {withRouter, RouteComponentProps} from \"react-router-dom\"\n\n\nconst {SubMenu, Item} = Menu;\n\ninterface PropsType extends RouteComponentProps{\n  theme?: string;\n  dispatch: Dispatch<any>;\n  collapsed?:boolean;\n\n}\n\nclass Index extends React.Component<PropsType, any> {\n\n  constructor(props: Readonly<PropsType> | PropsType) {\n    super(props);\n    let strings = props.location.pathname.split('/');\n    // console.log(props.location.pathname)\n    // console.log(strings)\n    this.defaultSelectedKeys.push(props.location.pathname);\n    strings.forEach((v,i) => {\n      if(i==1){\n        this.defaultOpenKeys.push('/'+v)\n      }else if(i<(strings.length-1) && i>1){\n        this.defaultOpenKeys.push(this.defaultOpenKeys[this.defaultOpenKeys.length-1]+'/'+v)\n      }\n\n    })\n\n    // console.log(this.defaultOpenKeys)\n    // console.log(this.defaultSelectedKeys)\n  }\n  private defaultOpenKeys:string[]=[];\n  private defaultSelectedKeys:string[]=[];\n\n  handleFilter = (permission: boolean) => {\n    return true;\n  }\n\n\n  renderMenu = (data: MenuConfigType[],path:string) => {\n    return data.map(item => {\n      const IconD = item.icon ? <Icon component={AllIcon[item.icon]}/> : null;\n      const pathPrefix:string=item.path[0]==='/'?item.path:(path+'/'+item.path);\n      // console.log(pathPrefix)\n      if (item.children) {\n        return (this.handleFilter(item.permission || true) && (\n            <SubMenu key={pathPrefix} title={item.title} icon={IconD}>\n              {this.renderMenu(item.children,pathPrefix)}\n            </SubMenu>\n        ))\n      } else {\n        return (this.handleFilter(item.permission || true) && (\n            <Item key={pathPrefix} title={item.title}\n                  icon={IconD}>\n              <Link to={pathPrefix}>\n                {item.title}\n              </Link>\n\n            </Item>\n        ))\n      }\n    })\n\n  }\n\n  render() {\n    let {collapsed,theme,dispatch} = this.props;\n\n    return (\n        <Layout.Sider theme={theme as SiderTheme ||'dark'} width={'220px'} collapsed={collapsed} breakpoint={'md'}\n        onBreakpoint={broken => {\n          // console.log(broken)\n          dispatch({type: 'global/setCollapsed', payload: {value: broken}});\n        }} >\n          <div style={{color:'white',fontSize:'36px',textAlign:\"center\"}}>\n            Logo\n          </div>\n          <Menu\n              defaultSelectedKeys={this.defaultSelectedKeys}\n              defaultOpenKeys={this.defaultOpenKeys}\n              theme={'dark'}\n              mode=\"inline\"\n          >\n            {this.renderMenu(menus,\"/\")}\n          </Menu>\n        </Layout.Sider>\n    );\n  }\n}\n\nexport default connect(({global}:{global:GlobalStateType})=>{\n  return {\n      ...global\n  }\n})(withRouter(Index));","/Users/tanjie/WebstormProjects/create1/my-ts/src/assets/icon/index.ts",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/components/svgIcon/index.tsx",[],["244","245"],"/Users/tanjie/WebstormProjects/create1/my-ts/src/locales/index.ts",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/locales/zh/menu.ts",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/redux/root.ts",["246","247","248"],"import {AnyAction, AppModels, Reducers} from \"./data\";\nimport {createStore, combineReducers, applyMiddleware} from \"redux\"\nimport createSagaMiddleware from \"redux-saga\"\nimport * as  effects from \"redux-saga/effects\"\nimport {compose} from \"redux\"\n\nimport globalModel from \"./models/global\"\nimport admin from \"@/pages/eCard/ICCard/models/admin\"\nimport ClassroomEdit from \"@/pages/eCard/ClassroomConfig/models/ClassroomEdit\";\nimport administrator from \"@/pages/eCard/PeopleEdit/models/administrator\";\nimport maintenance from \"@/pages/eCard/PeopleEdit/models/maintenance\";\nimport student from \"@/pages/eCard/PeopleEdit/models/student\";\nimport teacher from \"@/pages/eCard/PeopleEdit/models/teacher\";\nimport temporary from \"@/pages/eCard/PeopleEdit/models/temporary\";\n\n\nconst NAMESPACE_SEPARATOR = '/';\nconst app: AppModels = {models: []};\n\napp.models.push(globalModel)\napp.models.push(admin)\napp.models.push(ClassroomEdit)\napp.models.push(administrator)\napp.models.push(maintenance)\napp.models.push(student)\napp.models.push(teacher)\napp.models.push(temporary)\n\n\n// @ts-ignore\n//启用redux devtools，这个compose是外部插件加载进去\nconst composeEnhancers = window['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] as typeof compose || compose;\n\n/**\n * 处理reducers和effects，仿造dva.js\n */\nexport function start() {\n  let reducers: Reducers = {};\n  for (let model of app.models) {\n    reducers[model.namespace] = (state = model.state, action:AnyAction) => {\n      let actionType:string = action.type;\n      let values = actionType.split(NAMESPACE_SEPARATOR);\n       let lastIndex=values.length-1;\n      if (actionType.indexOf( model.namespace)===0) {\n        if (model.reducers?.hasOwnProperty(values[lastIndex])) {\n          return model.reducers[values[lastIndex]](state, action);\n        }\n      }\n      return state;\n    }\n  }\n  let reducer = combineReducers(reducers);\n  let sagaMiddleware = createSagaMiddleware();\n\n  function* rootSaga() {\n    for (const model of app.models) {\n      for (const key in model.effects) {\n        yield effects.takeEvery<string,(...args: any[]) => any>(`${model.namespace}${NAMESPACE_SEPARATOR}${key}`, model.effects[key],effects);\n      }\n    }\n  }\n  let store = createStore(reducer,composeEnhancers(applyMiddleware(sagaMiddleware)));\n  sagaMiddleware.run(rootSaga);\n  return store;\n\n}","/Users/tanjie/WebstormProjects/create1/my-ts/src/redux/models/global.ts",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/router/menu.ts",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/assets/icon/all.ts",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/layouts/header/BreadCrumb.tsx",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/layouts/footer/index.tsx",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/layouts/content/index.tsx",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/components/ProTable/proFormSearch.tsx",["249"],"import React from \"react\";\nimport {\n  Col,\n  Form,\n  Row,\n  Button,\n  Checkbox,\n  Space,\n  Tooltip, Switch,\n} from \"antd\";\n\nimport {\n  DownOutlined,\n  RedoOutlined,\n  SearchOutlined,\n  UpOutlined,\n\n} from \"@ant-design/icons/lib\";\nimport {FormItemProps} from \"antd/lib/form/FormItem\";\nimport {calculateGridRows} from \"@/utils/responsive\";\nimport {Dispatch} from \"@/redux/data\";\n\n/**\n * 查询表格通用搜索框\n */\n\nconst {Item} = Form;\n\n\nlet globalResizeTimeout = false;\n\nexport interface ProFormFields {\n  fuzzy?: boolean;\n  ASC?: boolean;\n}\n\nexport interface ProFormSearchItemArrays extends Array<FormItemProps> {\n}\n\n\nexport interface ProFormSearchProps {\n  /**\n   *是否隐藏扩展搜索项\n   */\n  isHide: boolean;\n  setHide?: (value: boolean) => void;\n  /**\n   * Form 子Item项\n   */\n  childrenItem: ProFormSearchItemArrays;\n\n  /**\n   * 父组件id\n   */\n  parentID?: string;\n  /**\n   * 确认参数\n   * @param value\n   */\n  finish?: (value: any) => void;\n  /**\n   * 字段发生变化回调\n   * @param changeValues\n   * @param allValues\n   */\n  fieldsChange?: (changeValues: any, allValues: any) => void;\n  /**\n   * 重设函数\n   */\n  reset?: Function;\n  /**\n   * 初始值\n   */\n  initialValues: { [name: string]: any };\n\n  /**\n   * 相关state的namespace\n   */\n  namespace: string;\n  dispatch: Dispatch;\n  pageSize:number;\n\n\n}\n\nconst ProFormSearch: React.FC<ProFormSearchProps> = (props) => {\n  const [form] = Form.useForm();\n\n  /**\n   * 展开按钮tooltip提示设置是否显示\n   */\n  const [visible, setVisible] = React.useState(false);\n  const [gridRowsMax, setGridRowsMax] = React.useState<number>();\n  const {isHide, setHide, childrenItem, finish, reset, initialValues, fieldsChange, dispatch, namespace,pageSize} = props;\n\n  let colNormal: any = isHide ? {xs: 24, sm: 24, md: 12, lg: 12, xl: 8, xxl: 6} : {\n    xs: 24,\n    sm: 24,\n    md: 12,\n    lg: 12,\n    xl: 8,\n    xxl: 8\n  };\n  // console.log(document.getElementById('proForm')?.clientWidth as number)\n  React.useEffect(() => {\n    window.addEventListener('resize', refresh)\n    return () => {\n      console.log(gridRowsMax)\n      window.removeEventListener('resize', refresh)\n    }\n  }, [])\n  const refresh = (e: any) => {\n    if (!globalResizeTimeout) {\n      globalResizeTimeout = true;\n      // console.log('resize')\n      setTimeout(() => {\n        globalResizeTimeout = false;\n        setGridRowsMax(calculateGridRows(colNormal));\n        // console.log(e)\n      }, 300)\n    }\n  }\n\n  /**\n   * 生成表单输入项目，同时处理收起和展开\n   */\n  const handleGeneratorItem = () => {\n    colNormal = isHide ? {xs: 24, sm: 24, md: 12, lg: 12, xl: 8, xxl: 6} : {\n      xs: 24,\n      sm: 24,\n      md: 12,\n      lg: 12,\n      xl: 8,\n      xxl: 8\n    };\n\n    const rowMax = calculateGridRows(colNormal);\n    let display: React.FC[] = [];\n    // console.log(isHide)\n    // console.log(rowMax)\n    if (isHide) {\n      if (childrenItem.length < rowMax) {\n        let xt = rowMax - childrenItem.length - 1;\n        for (let i = 0; i < xt; i++) {\n          display.push(() => <div></div>)\n        }\n      }\n\n    } else {\n      let xy = rowMax - (childrenItem.length % rowMax) - 1;\n      for (let i = 0; i < xy; i++) {\n        display.push(() => <div></div>)\n      }\n\n    }\n\n\n    return (\n      <>\n        {\n          childrenItem.map((value, index) => {\n            if (isHide) {\n              if (index < (rowMax - 1)) {\n                return (\n                  <Col {...colNormal} key={index} style={{textAlign: 'left'}}>\n                    <Item {...value} ></Item>\n                  </Col>\n                )\n              } else {\n                return undefined\n              }\n\n            } else {\n              return (\n                <Col {...colNormal} key={index}>\n                  <Item {...value} ></Item>\n                </Col>\n              )\n            }\n\n          })\n        }\n        {\n          display.map((Value, index) => {\n            return <Col {...colNormal} key={index + 100} style={{textAlign: 'left'}}><Value/></Col>\n          })\n        }\n      </>\n    );\n  }\n\n  /**\n   * 设置收起或展开state值\n   * @param value\n   */\n  const handleHide = (value: boolean) => {\n    dispatch({\n      type: `${namespace}/setSateProperty`,\n      payload: {dataIndex: 'isHideForm', value}\n    })\n  };\n\n  const handleSubmit = (value: any) => {\n    dispatch({type: `${namespace}/querySubmit`, payload: {...value,pageSize}})\n    dispatch({type: `${namespace}/setSateProperty`, payload: {dataIndex: 'formSearch', value}})\n  };\n  const handleReset = () => {\n    dispatch({\n      type: `${namespace}/setSateProperty`,\n      payload: {dataIndex: 'formSearch', value: {ASC: true}}\n    })\n  }\n\n  const handleFieldsChange = (value: any) => {\n    dispatch({\n      type: `${namespace}/setFormSearch`,\n      payload: {dataIndex: value[0].name, value: value[0].value}\n    })\n  }\n\n  return (\n    <div className={'site-custom-background'} style={{padding: '16px 16px 0 16px'}}>\n      <Form className=\"ant-advanced-search-form \"\n            labelAlign={'right'}\n            form={form}\n            initialValues={initialValues}\n            onFinish={values => {\n              handleSubmit(values);\n              finish?.(values);\n            }} onFieldsChange={(changedFields, allFields) => {\n        if (changedFields.length > 0) {\n          handleFieldsChange(changedFields);\n          fieldsChange?.(changedFields, allFields);\n        }\n      }}\n      >\n        <div id={'proForm'}>\n          <Row gutter={{xs: 24, sm: 24, md: 12, lg: 8, xl: 8, xxl: 8}} justify={'space-between'} align='middle'>\n            {handleGeneratorItem()}\n            <Col {...colNormal} style={{textAlign: 'right'}}>\n              <Space size={'small'} direction={'horizontal'} align='center'>\n                <Tooltip title=\"是否启用模糊匹配查询\"\n                         getPopupContainer={() => (document.getElementById('proForm') as HTMLElement)}>\n                  <Item name=\"fuzzy\" valuePropName=\"checked\">\n                    <Checkbox>模糊</Checkbox>\n                  </Item>\n                </Tooltip>\n                <Tooltip title=\"数据排序方式\" getPopupContainer={() => (document.getElementById('proForm') as HTMLElement)}>\n                  <Item name=\"ASC\" valuePropName=\"checked\">\n                    <Switch checkedChildren={'升序'} unCheckedChildren={'降序'}/>\n                  </Item>\n                </Tooltip>\n                <Item>\n                  <Space size={'middle'} direction={'horizontal'}>\n                    <Tooltip title=\"查询\" getPopupContainer={() => (document.getElementById('proForm') as HTMLElement)}>\n                      <Button shape={'circle'} type=\"primary\" htmlType=\"submit\" icon={<SearchOutlined/>}></Button>\n                    </Tooltip>\n                    <Tooltip title=\"清除\" getPopupContainer={() => (document.getElementById('proForm') as HTMLElement)}>\n                      <Button type=\"primary\" danger htmlType={'button'} icon={<RedoOutlined/>} onClick={() => {\n                        setTimeout(() => {\n                          form.resetFields()\n                        }, 200);\n                        handleReset();\n                        reset?.();\n                      }}/>\n                    </Tooltip>\n                    <Tooltip title={isHide ? '展开' : '收起'} mouseLeaveDelay={0.1} id={'toolTipHide'} visible={visible}\n                             getPopupContainer={() => (document.getElementById('proForm') as HTMLElement)}>\n                      <div onMouseOver={() => {\n                        setVisible(true);\n                      }}\n                           onMouseEnter={() => {\n                           }}\n                           onMouseLeave={() => {\n                             setVisible(false);\n                           }}\n                           onMouseOut={() => {\n                             setVisible(false);\n                           }}>\n                        <Button shape={'round'} type=\"primary\" htmlType={'button'} onClick={event => {\n                          setVisible(false);\n                          handleHide(!isHide);\n                          setHide?.(!isHide);\n                        }}\n                                icon={isHide ? <DownOutlined/> : <UpOutlined/>}>\n                        </Button>\n                      </div>\n\n                    </Tooltip>\n                  </Space>\n                </Item>\n              </Space>\n            </Col>\n          </Row>\n        </div>\n\n      </Form>\n    </div>\n\n  )\n}\nexport default ProFormSearch;\n","/Users/tanjie/WebstormProjects/create1/my-ts/src/utils/responsive.ts",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/ICCard/admin.tsx",["250","251"],"import React from \"react\";\nimport {ColumnsType} from \"antd/es/table\";\nimport {ICInformation, PersonBaseInformation,} from \"@/pages/eCard/data\";\nimport {ICCardStatusPredefine, ICCategoryPredefine,} from \"@/pages/eCard/global\";\nimport {ICCardStatusPredefineType,ICCategoryPredefineType} from \"../data\"\nimport {Button, Input, Popconfirm, Select, Space,} from \"antd\";\nimport {DeleteOutlined, EditOutlined} from \"@ant-design/icons/lib\";\nimport ProFormSearch, {ProFormSearchItemArrays} from \"@/components/ProTable/proFormSearch\";\nimport ProTable from \"@/components/ProTable/proTable\";\nimport model from \"./models/admin\"\nimport {StateType} from \"@/pages/eCard/ICCard/models/admin\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\"\n\nconst searchFormItemLayout = {\n  labelCol: {\n    xs: {span: 24},\n    sm: {span: 8},\n  },\n  wrapperCol: {\n    xs: {span: 24},\n    sm: {span: 16},\n  },\n}\n\nconst namespace=model.namespace;\n\ninterface AdminProps extends StateType{\n  dispatch: Dispatch;\n}\n\nconst title: string = 'IC卡信息管理';\nconst subTitle: string = 'IC卡信息查询、编辑、创建、删除等操作，同时可以查询到IC卡持卡人信息，还可以给IC卡分配人员';\n\nclass Admin extends React.Component<AdminProps, any> {\n\n\n  /**\n   * 表格定义\n   */\n  private columns: ColumnsType<ICInformation> = [\n    {\n      key: 'physicalID',\n      title: '物理卡号',\n      dataIndex: 'physicalID',\n      align: 'center',\n      ellipsis: true,\n      fixed: 'left',\n      width: 160,\n    }, {\n      key: 'cardNO',\n      title: '卡面编号',\n      dataIndex: 'cardNo',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n    }, {\n      key: 'cardCategory',\n      title: 'IC卡类别',\n      dataIndex: 'category',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n      render: (value: string) => {\n        return ICCategoryPredefine[value as ICCategoryPredefineType]\n      }\n    }, {\n      key: 'cardStatus',\n      title: '卡片状态',\n      dataIndex: 'status',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n      render: (value ) => {\n        return ICCardStatusPredefine[value as ICCardStatusPredefineType]\n      }\n    }, {\n      key: 'personName',\n      title: '姓名',\n      dataIndex: 'personBaseInformation',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n      render: (value: PersonBaseInformation) => {\n        return value?.name\n      }\n    }, {\n      key: 'personDepartment',\n      title: '工作单位',\n      dataIndex: 'personBaseInformation',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n      render: (value: PersonBaseInformation) => {\n        return value?.department\n      }\n    }, {\n      key: 'personIdentificationCode',\n      title: '工号',\n      dataIndex: 'personBaseInformation',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n      render: (value: PersonBaseInformation) => {\n        return value?.identificationCode\n      }\n    }, {\n      key: 'personCardID',\n      title: '身份证',\n      dataIndex: 'personBaseInformation',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n      render: (value: PersonBaseInformation) => {\n        return value?.cardID\n      }\n    }, {\n      key: 'personPhone',\n      title: '电话',\n      dataIndex: 'personBaseInformation',\n      align: 'center',\n      ellipsis: true,\n      width: 140,\n      render: (value: PersonBaseInformation) => {\n        return value?.phone\n      }\n    }, {\n      key: 'departmentMail',\n      title: '邮箱',\n      dataIndex: 'personBaseInformation',\n      align: 'center',\n      ellipsis: true,\n      width: 240,\n      render: (value: PersonBaseInformation) => {\n        return value?.mail\n      }\n    }, {\n      key: 'remarks',\n      title: '备注',\n      dataIndex: 'remarks',\n      align: 'center',\n      ellipsis: true,\n      width: 240,\n    }, {\n      key: 'createTime',\n      title: '创建时间',\n      dataIndex: 'createTime',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n      render: (value, record) => {\n        return value?.toLocaleString();\n      }\n    }, {\n      key: 'lastTime',\n      title: '修改时间',\n      dataIndex: 'lastTime',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n      render: (value, record) => {\n        return value?.toLocaleString();\n      }\n    }, {\n      key: 'action',\n      title: '操作',\n      align: 'center',\n      ellipsis: true,\n      width: 220,\n      render: (value, record) => {\n        return (\n            <Space>\n              <Button type={'primary'} icon={<EditOutlined/>} onClick={(e) => {\n\n              }}>编辑</Button>\n              <Popconfirm title=\"是否要删除此临时人员？\" onConfirm={() => {\n              }}>\n                <Button type={'primary'} danger icon={<DeleteOutlined/>}>删除</Button>\n              </Popconfirm>\n            </Space>\n        )\n      }\n    },\n  ]\n\n\n  render() {\n    const {isHideForm, formSearch, pageSize,data} = this.props;\n    const {dispatch,} = this.props;\n\n    /**\n     * 搜索字段定义\n     */\n    const searchItem: ProFormSearchItemArrays = [\n      {\n        label: 'IC卡物理卡号',\n        name: 'physicalID',\n        children: <Input style={{width: '100%'}} placeholder={'请输入IC卡物理卡号'}/>, ...searchFormItemLayout\n      }, {\n        label: 'IC卡卡面编号',\n        name: 'cardNO',\n        children: <Input style={{width: '100%'}} placeholder={'请输入IC卡卡面编号'}/>, ...searchFormItemLayout\n      }, {\n        label: '姓名',\n        name: 'name',\n        children: <Input style={{width: '100%'}} placeholder={'请输入持卡人人员姓名'}/>, ...searchFormItemLayout\n      }, {\n        label: 'IC卡类别', name: 'category', children: <Select placeholder={'请选择IC卡类别'}\n                                                            style={{width: '160px'}}\n                                                            options={Object.keys(ICCategoryPredefine).map(value=> {\n                                                              return {\n                                                                label: ICCategoryPredefine[value as ICCategoryPredefineType],\n                                                                value: value,\n                                                              }\n                                                            })}/>, ...searchFormItemLayout\n      }, {\n        label: 'IC卡状态', name: 'status', children: <Select placeholder={'请选择IC卡状态'}\n                                                          style={{width: '160px'}}\n                                                          options={Object.keys(ICCardStatusPredefine).map((value) => {\n                                                            return {\n                                                              label: ICCardStatusPredefine[value as ICCardStatusPredefineType],\n                                                              value: value,\n                                                            }\n                                                          })}/>, ...searchFormItemLayout\n      }, {\n        label: '工作单位', name: 'department', children: <Input placeholder={'请输入持卡人工作单位'}\n                                                               style={{width: '100%'}}/>, ...searchFormItemLayout\n      }, {\n        label: '工号', name: 'identificationCode', children: <Input style={{width: '100%'}}\n                                                                      placeholder={'请输入持卡人学工号'}/>, ...searchFormItemLayout\n      }, {\n        label: '身份证', name: 'cardID', children: <Input style={{width: '100%'}}\n                                                          placeholder={'请输入持卡人身份证'}/>, ...searchFormItemLayout\n      }, {\n        label: '电话', name: 'phone', children: <Input style={{width: '100%'}}\n                                                        placeholder={'请输入持卡人电话'}/>, ...searchFormItemLayout\n      }, {\n        label: '邮箱', name: 'mail', children: <Input style={{width: '100%'}}\n                                                       placeholder={'请输入持卡人邮箱'}/>, ...searchFormItemLayout\n      },\n\n    ];\n    return (\n        <div><ProFormSearch initialValues={formSearch} childrenItem={searchItem} isHide={isHideForm}\n                            namespace={namespace} dispatch={dispatch} pageSize={pageSize}/>\n          <div style={{textAlign: 'right', padding: '8px 16px 0 16px'}}>\n            <Space><Button type={'primary'}>新建IC卡</Button><Button type={'primary'}>批量导入</Button></Space></div>\n          <div className={'site-custom-background'} style={{marginTop: 8}}>\n            <ProTable<ICInformation> title={'IC卡'} namespace={namespace} data={data}\n                                     columns={this.columns} dispatch={dispatch}\n                                     pageSize={pageSize} formSearch={formSearch}\n                                     tableProps={{size: 'middle'}}\n            />\n\n          </div>\n        </div>\n\n    );\n  }\n}\n\nexport default connect(\n    (\n        state:any) => {\n      return {\n          ...state[namespace],\n\n      }\n    })(Admin);\n","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/global.ts",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/components/ProTable/proTable.tsx",["252"],"import {Table} from \"antd\";\n\nimport React from \"react\";\n\nimport {GenericResult} from \"@/utils/request\";\n\nimport {DataSource,} from \"@/components/ProTable/data\";\nimport {ColumnsType, TableProps} from \"antd/es/table\";\n\nimport {Dispatch} from \"@/redux/data\";\n\n\nexport interface ProTableProps<D> {\n  tableProps?: TableProps<D>;\n  title: string;\n  namespace: string;\n  data: GenericResult<D[]>;\n  columns: ColumnsType<D>;\n\n  dispatch: Dispatch;\n  pageSize: number;\n  formSearch: any;\n}\n\nclass ProTable<T extends DataSource> extends React.Component<ProTableProps<T>, any> {\n\n  constructor(props: ProTableProps<T>, context: any) {\n    super(props, context);\n  }\n\n  render() {\n    const {namespace, data, columns, pageSize, dispatch, formSearch, tableProps, title} = this.props;\n    return (<Table<T> columns={columns} dataSource={data.data} bordered scroll={{x: 800}}\n                      loading={false}\n                      pagination={{\n                        current: data?.page,\n                        pageSize: pageSize,\n                        total: data?.totalRows || 0,\n                        pageSizeOptions: ['10', '20', '30', '50'],\n                        showLessItems: true,\n                        showSizeChanger: true,\n                        showQuickJumper: true,\n                        showTotal: (total, range) => `总计${total}个${title}`,\n                        onShowSizeChange: (current, size) => {\n                          dispatch({\n                            type: `${namespace}/querySubmit`,\n                            payload: {...formSearch, page: current, pageSize: size}\n                          });\n                          dispatch({\n                            type: `${namespace}/setSateProperty`,\n                            payload: {dataIndex: 'pageSize', value: size}\n                          });\n                        },\n                        onChange: (page, pageSize) => {\n                          dispatch({\n                            type: `${namespace}/querySubmit`,\n                            payload: {...formSearch, page, pageSize}\n                          })\n                        }\n                      }} {...tableProps}\n\n    />)\n  }\n\n}\n\nexport default ProTable;\n","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/ICCard/models/admin.ts",["253"],"import {ProFormFields} from \"@/components/ProTable/proFormSearch\";\nimport {ProStateType, ProTableModelType} from \"@/components/ProTable/data\";\nimport {ICInformation, AdminInformationType} from \"@/pages/eCard/data\";\nimport {getICCard, } from \"@/pages/eCard/service\";\nimport {message} from \"antd\";\nimport {setFormSearch, setSateProperty} from \"@/components/ProTable/reducers\";\n\n\nexport interface FormSearchSateType extends ProFormFields {\n  name?: string;\n  cardID?: string;\n  department?: string;\n  phone?: string;\n  mail?: string;\n  physicalID?: string;\n  cardNO?:string;\n  category?:string;\n  status?:string;\n  identificationCode?:string;\n}\n\nexport interface StateType extends ProStateType<AdminInformationType, FormSearchSateType> {\n\n}\n\ninterface ExtendModel {\n\n}\n\nconst Model: ProTableModelType<ExtendModel, StateType> = {\n  namespace: 'eCard/ICCard/admin',\n  state: {\n    data: {page: 0, pageSize: 10, totalRows: 0, totalPages: 0, data: []},\n    pageSize: 10,\n    isHideForm: true,\n    formSearch: {fuzzy: false, ASC: true}\n  },\n\n  effects: {\n    * querySubmit({payload},{call,put}) {\n      const response = yield call(getICCard, {\n        ...payload\n      });\n      yield put({type: 'setSateProperty', payload: {dataIndex: 'data', value: {data: []}}});\n      if (response && response.success && (response.resultBody != undefined)) {\n        yield put({\n          type: 'setSateProperty', payload: {\n            dataIndex: 'data', value: {\n              ...response.resultBody, data: response.resultBody?.data?.map((value: ICInformation) => {\n                return {...value, key: value.id};\n              })\n            }\n          }\n        })\n      } else {\n        message.error('查询临时人员信息失败:' + response.msg, 2).then(r =>{} )\n      }\n    },\n  },\n\n  reducers: {\n    setFormSearch,\n    setSateProperty,\n  },\n};\n\nexport default Model;\n","/Users/tanjie/WebstormProjects/create1/my-ts/src/components/ProTable/reducers.ts",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/service.ts",["254","255"],"import request ,{GenericResult, Restful} from '@/utils/request';\nimport {\n  AdminInformationType,\n  BuildingInformation,\n  CampusInformation,\n  ClassroomCategoryInformation,\n  ClassroomInformation, EquipmentListConfigure, ICInformation, LogClassroomSwipe,\n  MaintenanceInformationType,\n  StudentInformationType,\n  TeacherInformationType,\n  TemporaryInformationType\n} from './data.d';\n\nimport {Moment} from \"moment\";\n\nexport async function getClassroom(params: {\n  campus?: string;\n  building?: string;\n  name?: string;\n  floor?: number;\n  category?: string;\n  fuzzy?: boolean;\n  page?: number;\n  pageSize?: number,\n}) {\n  return request.get<Restful<GenericResult<ClassroomInformation[]>>>('/api/information/classroom/config/classroom', {params});\n}\n\nexport async function insertClassroom(params: {\n  campus?: string;\n  building?: string;\n  name?: string;\n  floor?: number;\n  category?: string;\n}) {\n  return request.post<Restful<ClassroomInformation>>('/api/information/classroom/config/classroom', {params});\n}\n\nexport async function updateClassroom(params: {\n  campus?: string;\n  building?: string;\n  name?: string;\n  floor?: number;\n  category?: string;\n}) {\n  return request.put<Restful<ClassroomInformation>>('/api/information/classroom/config/classroom', {params});\n}\n\nexport async function deleteClassroom(params: {\n  campus?: string;\n  building?: string;\n  name?: string;\n  floor?: number;\n  category?: string;\n}) {\n  return request.delete<Restful<ClassroomInformation>>('/api/information/classroom/config/classroom', {params});\n}\n\nexport async function getBuilding(params: {\n  campus?: string,\n  name?: string,\n  floors?: number,\n  startFloor?: number,\n  classrooms?: number\n}) {\n  return request.get<Restful<BuildingInformation[]>>('/api/information/classroom/config/build', {params});\n}\n\nexport async function insertBuilding(params: {\n  campus: string,\n  name: string,\n  nameAlias: string,\n  floors: number,\n  startFloor: number,\n}) {\n  return request.post<Restful<BuildingInformation[]>>('/api/information/classroom/config/build', {data: {...params}});\n}\n\nexport async function updateBuilding(campus: string, name: string, params: {\n  campus?: string,\n  name?: string,\n  nameAlias?: string,\n  floors?: number,\n  startFloor?: number\n}) {\n  // console.log('/api/information/classroom/config/build/' + `${campus}/${name}`)\n  return request.put<Restful<BuildingInformation>>('/api/information/classroom/config/build' + `/${campus}/${name}`, {data: {...params}});\n}\n\nexport async function deleteBuilding(params: {\n  campus: string,\n  name: string,\n  nameAlias?: string,\n  floors?: number,\n  startFloor?: number\n}) {\n  const {campus, name} = params;\n  return request.delete<Restful<BuildingInformation>>('/api/information/classroom/config/build' + `/${campus}/${name}`);\n}\n\nexport async function getCampus(params: {\n  name?: string,\n  buildings?: number\n}) {\n  return request.get<Restful<CampusInformation[]>>('/api/information/classroom/config/campus', {params});\n}\n\nexport async function updateCampus(prev: string, params: {\n  name: string,\n  nameAlias: string,\n}) {\n  return request.put<Restful<CampusInformation>>('/api/information/classroom/config/campus/' + prev, {\n    data: {\n      name: params.name,\n      nameAlias: params.nameAlias\n    }\n  });\n}\n\nexport async function insertCampus(params: {\n  name: string,\n  nameAlias: string,\n}) {\n  return request.post<Restful<CampusInformation>>('/api/information/classroom/config/campus', {\n    data: {\n      name: params.name,\n      nameAlias: params.nameAlias\n    }\n  });\n}\n\nexport async function deleteCampus(prev: string) {\n  return request.delete<Restful<CampusInformation>>('/api/information/classroom/config/campus/' + prev);\n}\n\nexport async function getClassroomCategory(params: {\n  name?: string,\n}) {\n  return request.get<Restful<ClassroomCategoryInformation[]>>('/api/information/classroom/config/category', {params});\n}\n\nexport async function updateClassroomCategory(prev: string, params: {\n  name?: string,\n  equipmentList?: EquipmentListConfigure,\n}) {\n  return request.put<Restful<ClassroomCategoryInformation>>('/api/information/classroom/config/category/' + prev, {\n    data: {\n      name:params.name,\n      equipmentList:params.equipmentList\n    }\n  });\n}\n\nexport async function insertClassroomCategory(params: {\n  name: string,\n  equipmentList?: EquipmentListConfigure,\n}) {\n  return request.post<Restful<ClassroomCategoryInformation>>('/api/information/classroom/config/category', {\n    data: {\n      name: params.name,\n      equipmentList:params.equipmentList\n    }\n  });\n}\n\nexport async function deleteClassroomCategory(prev: string) {\n  return request.delete<Restful<ClassroomCategoryInformation>>('/api/information/classroom/config/category/' + prev);\n}\n\nexport async function getAdministrator(params: {\n  name?: string;\n  cardID?: string;\n  employeeID?: number;\n  departmentName?: string;\n  sex?: string;\n  grade?: number;\n  hire?: Moment[] | string[];\n  post?: string;\n  phone?: string;\n  mail?: string;\n  status?: string;\n  fuzzy?: boolean;\n  ASC?: boolean;\n\n}) {\n  return request.get<Restful<GenericResult<AdminInformationType[]>>>('/api/information/personnel/config/administrator', {params});\n}\n\nexport async function getStudent(params: {\n  name?: string;\n  cardID?: string;\n  employeeID?: number;\n  departmentName?: string;\n  sex?: string;\n  grade?: number;\n  hire?: Moment[];\n  post?: string;\n  phone?: string;\n  mail?: string;\n  status?: string;\n  fuzzy?: boolean;\n  ASC?: boolean;\n\n}) {\n  return request.get<Restful<GenericResult<StudentInformationType[]>>>('/api/information/personnel/config/student', {params});\n}\n\nexport async function getTeacher(params: {\n  name?: string;\n  cardID?: string;\n  employeeID?: number;\n  departmentName?: string;\n  sex?: string;\n  grade?: number;\n  hire?: Moment[];\n  post?: string;\n  phone?: string;\n  mail?: string;\n  status?: string;\n  fuzzy?: boolean;\n  ASC?: boolean;\n\n}) {\n  return request.get<Restful<GenericResult<TeacherInformationType[]>>>('/api/information/personnel/config/teacher', {params});\n}\n\nexport async function getTemporary(params: {\n  name?: string;\n  cardID?: string;\n  employeeID?: number;\n  departmentName?: string;\n  sex?: string;\n  grade?: number;\n  hire?: Moment[];\n  post?: string;\n  phone?: string;\n  mail?: string;\n  status?: string;\n  fuzzy?: boolean;\n  ASC?: boolean;\n\n}) {\n  return request.get<Restful<GenericResult<TemporaryInformationType[]>>>('/api/information/personnel/config/temporary', {params});\n}\n\nexport async function getMaintenance(params: {\n  name?: string;\n  cardID?: string;\n  employeeID?: number;\n  departmentName?: string;\n  sex?: string;\n  grade?: number;\n  hire?: Moment[];\n  post?: string;\n  phone?: string;\n  mail?: string;\n  status?: string;\n  fuzzy?: boolean;\n  ASC?: boolean;\n\n}) {\n  return request.get<Restful<GenericResult<MaintenanceInformationType[]>>>('/api/information/personnel/config/maintenance', {params});\n}\n\nexport async function getSwipe(params: {\n  name?: string;\n  cardID?: string;\n  department?: string;\n  phone?: string;\n  mail?: string;\n  physicalID?: string;\n  time?: Moment[];\n  cardNO?: string;\n  category?: string;\n  ack?: boolean;\n  identificationCode?: string;\n  fuzzy?: boolean;\n  ASC?: boolean;\n\n}, name: string) {\n  // console.log(name)\n  return request.get<Restful<GenericResult<LogClassroomSwipe[]>>>(`/api/log/swipe/history/${name}`, {params});\n}\n\nexport async function getICCard(params: {\n  name?: string;\n  cardID?: string;\n  department?: string;\n  phone?: string;\n  mail?: string;\n  physicalID?: string;\n  cardNO?: string;\n  category?: string;\n  identificationCode?: string;\n  fuzzy?: boolean;\n  ASC?: boolean;\n\n}) {\n  // console.log(name)\n  return request.get<Restful<GenericResult<ICInformation[]>>>('/api/information/ic/config/icCardInformation', {params});\n}\n\n\n\n","/Users/tanjie/WebstormProjects/create1/my-ts/src/utils/request.ts",["256"],"import axios, {AxiosResponse} from \"axios\";\nimport {message} from \"antd\";\n\nconst codeMessage = {\n  200: '服务器成功返回请求的数据。',\n  201: '新建或修改数据成功。',\n  202: '一个请求已经进入后台排队（异步任务）。',\n  204: '删除数据成功。',\n  400: '发出的请求有错误，服务器没有进行新建或修改数据的操作。',\n  401: '用户没有权限（令牌、用户名、密码错误）。',\n  403: '用户得到授权，但是访问是被禁止的。',\n  404: '发出的请求针对的是不存在的记录，服务器没有进行操作。',\n  406: '请求的格式不可得。',\n  410: '请求的资源被永久删除，且不会再得到的。',\n  422: '当创建一个对象时，发生一个验证错误。',\n  500: '服务器发生错误，请检查服务器。',\n  502: '网关错误。',\n  503: '服务不可用，服务器暂时过载或维护。',\n  504: '网关超时。',\n};\n\n\nconst axInstance = axios.create({\n  baseURL: 'http://localhost:8080/api/',\n  timeout: 3000\n});\n\naxInstance.interceptors.request.use(config => {\n  return config;\n}, err => {\n  message.error({message: '请求超时!'}).then(r => {\n  });\n  return Promise.reject(err);\n});\n\naxInstance.interceptors.response.use(function (response: AxiosResponse<Restful<any>>) {\n  // // 对响应数据做点什么\n  // if (response?.status != 200) {\n  //   message.error({message: response.data.msg}).then(r => {\n  //   });\n  //   response.data.success = false;\n  // }\n  return response;\n}, function (error: { response: AxiosResponse<Restful<any>> }) {\n  // 对响应错误做点什么\n  const {response} = error;\n  message.error({message: response.headers + response.status + response.status.toString() + ':' + response.data.msg}).then(r => {\n  })\n  return Promise.reject(error);\n})\n\nexport interface Restful<T> {\n  success: boolean;\n  msg: string;\n  resultBody: T;\n}\n\nexport interface GenericResult<T> {\n  page: number;\n  pageSize: number;\n  totalRows: number;\n  totalPages: number;\n  data: T;\n}\n\nexport default axInstance","/Users/tanjie/WebstormProjects/create1/my-ts/src/error/error404.tsx",["257","258"],"import {Button, Col, Row} from \"antd\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport { RouteComponentProps} from \"react-router-dom\"\ninterface PropsType extends RouteComponentProps {\n\n}\nclass Error404 extends React.Component<PropsType, any>{\n  goBack = () => {\n    this.props.history.push('/home');\n  };\n  render() {\n    return (\n     <div>\n       <h1>404</h1>\n       <p>抱歉，你访问的页面不存在</p>\n       <div>\n         <Button onClick={this.goBack} type=\"primary\">\n           返回首页\n         </Button>\n       </div>\n     </div>\n\n\n    );\n  }\n}\n\nexport default connect((state)=>state)( Error404);","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/ClassroomConfig/CampusAndBuilding.tsx",["259","260","261","262","263","264","265","266"],"import {PlusOutlined} from '@ant-design/icons';\nimport {Button, Input, Popconfirm, Table, message, Form, Space} from 'antd';\nimport React, {FC, useEffect, useState} from 'react';\nimport {ColumnsType} from \"antd/es/table\";\nimport {BuildingInformation, CampusInformation, ClassroomInformation} from \"@/pages/eCard/data\";\nimport {\n  deleteBuilding,\n  deleteCampus,\n  getCampus,\n  insertBuilding,\n  insertCampus,\n  updateBuilding,\n  updateCampus\n} from \"@/pages/eCard/service\";\nimport {SyncOutlined, PoweroffOutlined, EditOutlined, DeleteOutlined, SaveOutlined} from \"@ant-design/icons/lib\";\n\n\ninterface BuildEdit extends BuildingInformation {\n  index: number;\n}\n\nconst title: string = '校区和所属楼栋信息';\nconst subTitle: string = '校区和楼栋查询、增加、修改、删除操作.注意事项不能删除有楼栋的校区和有教室的楼栋，为了支持小型低功耗不能识别UTF-8中文编码设备，楼栋和校区均有要设置英文别名';\n\nconst CampusAndBuilding: FC<any> = () => {\n\n  /**\n   * 创建campus和build表单数据域,\n   */\n  const [formCampus] = Form.useForm();\n  const [formBuild] = Form.useForm();\n\n  /**\n   * 设置state\n   */\n  const [loading, setLoading] = useState<boolean>(true);\n  const [editKey, setEditKey] = useState<string>(\"\");\n  const [newEdit, setNewEdit] = useState(false);\n  const [campus, setCampus] = useState<CampusInformation[]>([]);\n\n\n  /**\n   * 判断是否处于编辑状态\n   * @param key\n   */\n  const isEdit = (key: string) => {\n    return key === editKey;\n  }\n\n  /**\n   * 产生楼栋key\n   * @param id\n   */\n  const generateBuildKey = (id: number | string) => 'build' + id;\n\n  /**\n   * 新建校区，保存到sate中\n   */\n  const newCampusSate = () => {\n    setNewEdit(true);\n    formCampus.setFieldsValue({name: '', nameAlias: ''});\n    let n = campus.slice();\n    n.push({key: 'new' + campus.length});\n    setCampus(n);\n    setEditKey('new' + campus.length);\n  }\n\n  /**\n   * 新建楼栋，保存到sate中\n   * @param record 校区信息\n   * @param index campus索引\n   */\n  const newBuildSate = (record: CampusInformation, index: number) => {\n    setNewEdit(true);\n    formBuild.setFieldsValue({name: '', nameAlias: '', floors: '', startFloor: ''});\n    let n = campus.slice(); //产生一个新数组，不影响原来的campus\n    if (!!n[index]?.buildings) {\n      n[index]?.buildings?.push({key: 'newBuild' + ((campus[index]?.buildings?.length || 0) + 1), campus: record.name});\n\n    } else {\n      n[index].buildings = [{key: 'newBuild' + 1, campus: record.name}];\n    }\n    // console.log(n)\n    setEditKey('newBuild' + n[index]?.buildings?.length);\n    setCampus(n);\n\n  }\n  const cancelNewCampusSate = () => {\n    let n = campus.slice();\n    n.pop();\n    setCampus(n);\n    setEditKey(\"\");\n    setNewEdit(false);\n  }\n  const cancelNewBuildSate = (record: BuildingInformation, indexCampus: number) => {\n    let n = campus.slice();\n    n[indexCampus]?.buildings?.pop();\n    setCampus(n);\n    setEditKey(\"\");\n    setNewEdit(false);\n  }\n\n  const saveCampusSate = async (value: CampusInformation, isNew?: boolean) => {\n    try {\n      const item = await formCampus.validateFields() as CampusInformation;\n      // console.log(item)\n      const newData = [...campus];\n      let findIndex = newData.findIndex(v => v.key === value.key);\n      // console.log(newData)\n      // console.log(findIndex)\n      if (findIndex > -1) {\n        const v = newData[findIndex];\n        newData.splice(findIndex, 1, {...v, name: item.name, nameAlias: item.nameAlias})\n      } else {\n        newData.push({...value, name: item.name, nameAlias: item.nameAlias})\n      }\n      // console.log(newData)\n      setLoading(true);\n      if (!!isNew) {\n        insertCampus({name: item.name as string, nameAlias: item.nameAlias as string}).then(reason => {\n          if (reason?.data.success) {\n            setCampus(newData);\n            setEditKey('');\n            setNewEdit(false);\n            message.success(`新建校区:${item.name} 成功`)\n          } else {\n            message.error(`新建校区:${item.name} API失败:` + reason?.data.msg)\n          }\n        }).catch(reason => {\n          message.error(`新建校区:${item.name} API连接失败:` + reason.toString())\n        }).finally(() => {\n          setLoading(false);\n        })\n      } else {\n        const prev = value.name as string;\n        updateCampus(prev, {name: item.name as string, nameAlias: item.nameAlias as string}).then(reason => {\n          if (reason?.data.success) {\n            setCampus(newData);\n            setEditKey('');\n            setNewEdit(false);\n            message.success(`校区:${prev} 更新}成功`)\n          } else {\n            message.error(`校区:${prev} 更新API失败:` + reason?.data.msg)\n          }\n        }).catch(reason => {\n          message.error(`请求更新校区:${prev} API连接失败:` + reason.toString())\n        }).finally(() => {\n          setLoading(false);\n        })\n      }\n\n    } catch (e) {\n      console.log('验证校区信息失败', e)\n    }\n  }\n\n  const saveBuildSate = async (value: BuildingInformation, index: number, isNew?: boolean) => {\n    try {\n      const item = await formBuild.validateFields() as BuildingInformation;\n\n      const newData = [...campus];\n      const build: BuildingInformation[] = [...newData[index]?.buildings || []];\n      let findIndex = build.findIndex(v => v.key === value.key);\n      // console.log(findIndex)\n      // console.log(build)\n      // console.log(value)\n      if (findIndex > -1) {\n        newData[index]?.buildings?.splice(findIndex, 1, {\n          ...value,\n          name: item.name,\n          nameAlias: item.nameAlias,\n          floors: item.floors,\n          startFloor: item.startFloor\n        })\n      } else {\n        newData[index]?.buildings?.push({\n          ...value,\n          name: item.name,\n          nameAlias: item.nameAlias,\n          floors: item.floors,\n          startFloor: item.startFloor\n        })\n      }\n      setLoading(true);\n      if (!!isNew) {\n        insertBuilding({\n          campus: value.campus as string,\n          name: item.name as string,\n          nameAlias: item.nameAlias as string,\n          floors: item.floors as number,\n          startFloor: item.startFloor as number\n        }).then(reason => {\n          if (reason?.status) {\n            setCampus(newData);\n            setEditKey('');\n            setNewEdit(false);\n            message.success(`新建楼栋:${value.campus}${item.name} 成功`)\n          } else {\n            message.error(`新建楼栋:${value.campus}${item.name} API失败:` + reason?.data.msg)\n          }\n        }).catch(reason => {\n          message.error(`新建楼栋:${value.campus}${item.name} API连接失败:` + reason.toString())\n        }).finally(() => {\n          setLoading(false);\n        })\n      } else {\n        const prevCampus = value.campus as string;\n        const prevName = value.name as string;\n        updateBuilding(prevCampus, prevName, {\n          campus: value.campus as string,\n          name: item.name as string,\n          nameAlias: item.nameAlias as string,\n          floors: item.floors as number,\n          startFloor: item.startFloor as number\n        }).then(reason => {\n          if (reason?.data.success) {\n            setCampus(newData);\n            setEditKey('');\n            setNewEdit(false);\n            message.success(`楼栋:${value.campus}${value.name} 更新成功`)\n          } else {\n            message.error(`楼栋:${value.campus}${value.name} 更新API失败:` + reason?.data.msg)\n          }\n        }).catch(reason => {\n          message.error(`请求更新楼栋:${value.campus}${value.name}  API连接失败:` + reason.toString())\n        }).finally(() => {\n          setLoading(false);\n        })\n      }\n\n    } catch (e) {\n      console.log('验证楼栋信息失败', e)\n    }\n  }\n\n  const removeCampusSate = (prev: string) => {\n    setLoading(true)\n    deleteCampus(prev).then((value) => {\n      if (value.data.success) {\n        const newData = [...campus];\n        let findIndex = newData.findIndex(v => v.name === prev) || -1;\n        if (findIndex > -1) {\n          newData.splice(findIndex, 1,)\n        } else {\n          newData.pop();\n        }\n        setCampus(newData);\n        message.success(`删除校区:${prev} 成功`).then(r => {\n        })\n      } else {\n        message.error(`删除校区:${prev} 失败: ${value.data.msg}`).then(r => {\n        })\n      }\n    }, reason => {\n      message.error(`删除校区:${prev} 信息api请求失败:${reason.toString()}`).then(r => {\n      })\n    }).finally(() => {\n      setNewEdit(false)\n      setEditKey('')\n      setLoading(false)\n    });\n  }\n\n  const removeBuildSate = (record: BuildEdit, index: number) => {\n    setLoading(true)\n    deleteBuilding({name: record.name as string, campus: record.campus as string}).then((value) => {\n      if (value.data.success) {\n        const newData = [...campus];\n        let findIndex = newData[index]?.buildings?.findIndex(v => v.name === record.name) || -1;\n        // console.log(findIndex)\n        // console.log(newData)\n        if (findIndex > -1) {\n          newData[index]?.buildings?.splice(findIndex, 1,)\n        } else {\n          newData[index]?.buildings?.pop();\n        }\n        setCampus(newData);\n        message.success(`删除楼栋:${record.campus}${record.name} 成功`)\n      } else {\n        message.error(`删除楼栋:${record.campus}${record.name} 失败: ${value.data.msg}`)\n      }\n    }, reason => {\n      message.error(`删除楼栋:${record.campus}${record.name} api请求失败:${reason.toString()}`)\n    }).finally(() => {\n      setNewEdit(false)\n      setEditKey('')\n      setLoading(false)\n    });\n  }\n\n  const updateCampusSate = () => {\n    setLoading(true)\n    getCampus({}).then((value) => {\n      if (value?.data.success) {\n        setCampus(value?.data.resultBody?.map((d => ({\n          ...d, key: d.id, buildings: d.buildings?.map(value1 => {\n            return {\n              ...value1,\n              key: generateBuildKey(value1.id as number),\n              campus: d.name,\n            }\n          })\n        }))));\n        message.success('刷新校区信息成功')\n      } else {\n        message.error('刷新校区信息失败:' + value?.data.msg)\n      }\n    }, reason => {\n      message.error('刷新校区信息API请求连接失败:' + reason.toString())\n    }).finally(() => {\n      setNewEdit(false)\n      setEditKey('')\n      setLoading(false)\n    });\n  }\n\n  useEffect(() => {\n    // let t = true;\n    const timeID = setTimeout(() => {\n      // console.log('start campus build')\n      getCampus({}).then((value) => {\n        // console.log(\"start\")\n        // if (t) {\n        if (value?.data.success) {\n          setCampus(value?.data.resultBody?.map((d => ({\n            ...d, key: d.id, buildings: d.buildings?.map(value1 => {\n              return {\n                ...value1,\n                key: generateBuildKey(value1.id as number),\n                campus: d.name,\n              }\n            })\n          }))));\n          setLoading(false)\n        } else {\n          message.error('初始刷新页面失败:' + value?.data.msg)\n        }\n        // }\n      }, reason => {\n        message.error('初始刷新页面校区信息API请求失败:' + reason.toString())\n      });\n    }, 500);\n\n    return () => {\n      // console.log(\"exit\")\n      // t = false\n      clearTimeout(timeID)\n    }\n  }, [])\n\n\n  const columnsCampus: ColumnsType<CampusInformation> = [\n    {\n      title: '校区名称',\n      dataIndex: 'name',\n      key: 'name',\n      width: '240px',\n      align: 'center',\n      ellipsis: true,\n      render: (text: string, record: CampusInformation) => {\n        if (isEdit(record.key as string)) {\n          return (\n              <Form.Item name={'name'} rules={[{required: true, message: '请输入校区'}]}>\n                <Input autoFocus placeholder=\"校区名称\"/>\n              </Form.Item>\n          );\n        }\n        return text;\n      },\n    }, {\n      title: '校区名称别名',\n      dataIndex: 'nameAlias',\n      key: 'nameAlias',\n      width: '240px',\n      align: 'center',\n      ellipsis: true,\n      render: (text: string, record: CampusInformation) => {\n        if (isEdit(record.key as string)) {\n          return (\n              <Form.Item name={'nameAlias'} rules={[{required: true, message: '请输入英文开头数字混合别名'}]}>\n                <Input autoFocus placeholder=\"请输入英文开头数字混合别名\"/>\n              </Form.Item>\n          );\n        }\n        return text;\n      },\n    }, {\n      title: '楼栋数量',\n      dataIndex: 'buildings',\n      key: 'buildings',\n      width: '120px',\n      align: 'center',\n      ellipsis: true,\n      render: (text: string, record: CampusInformation) => {\n        if (isEdit(record.key as string)) {\n          return (\n              <></>\n          );\n        }\n        return text?.length || 0;\n      },\n    }, {\n      title: '创建时间',\n      dataIndex: 'createTime',\n      key: 'createTime',\n      width: '200px',\n      align: 'center',\n      ellipsis: true,\n      render: (text: string, record: CampusInformation) => {\n        if (isEdit(record.key as string)) {\n          return (\n              <></>\n          );\n        }\n        return text?.toLocaleString();\n      },\n\n    }, {\n      title: '修改时间',\n      dataIndex: 'lastTime',\n      key: 'lastTime',\n      width: '200px',\n      align: 'center',\n      ellipsis: true,\n      render: (text: string, record: CampusInformation) => {\n        if (isEdit(record.key as string)) {\n          return (\n              <></>\n          );\n        }\n        return text?.toLocaleString();\n      },\n    }, {\n      title: '操作',\n      key: 'action',\n      align: 'center',\n      render: (text: any, record: CampusInformation) => {\n        if (loading) {\n          return null;\n        }\n        if (isEdit(record.key as string)) {\n          if (newEdit) {\n            return (\n                <Space>\n                  <Button type={'primary'} icon={<SaveOutlined/>} onClick={(e) => {\n                    saveCampusSate(record, true).catch()\n                  }}>添加</Button>\n                  <Popconfirm title=\"是否要取消添加？\" onConfirm={() => {\n                    cancelNewCampusSate();\n                  }}>\n                    <Button type={'dashed'} icon={<PoweroffOutlined/>}>取消</Button>\n                  </Popconfirm>\n                </Space>\n            );\n          }\n          return (\n              <Space>\n                <Button type={'primary'} icon={<SaveOutlined/>} onClick={(e) => {\n                  saveCampusSate(record, false).catch()\n                }}>保存</Button>\n                <Popconfirm title=\"是否要取消编辑？\" onConfirm={() => {\n                  setEditKey(\"\")\n                }}>\n                  <Button type={'dashed'} icon={<PoweroffOutlined/>}>取消</Button>\n                </Popconfirm>\n              </Space>\n          );\n        }\n        return (\n            <Space>\n              <Button type={'primary'} icon={<EditOutlined/>} disabled={editKey != \"\"} onClick={(e) => {\n                setEditKey(record.key as string);\n                formCampus.setFieldsValue({name: record.name, nameAlias: record.nameAlias});\n              }}>编辑</Button>\n              <Popconfirm title=\"是否要删除此行？\" disabled={editKey != \"\"} onConfirm={() => {\n                removeCampusSate(record.name as string)\n              }}>\n                <Button type={'primary'} danger icon={<DeleteOutlined/>} disabled={editKey != \"\"}>删除</Button>\n              </Popconfirm>\n            </Space>\n        );\n      },\n    },\n  ];\n\n  const columnsBuilding: ColumnsType<BuildEdit> = [\n    {\n      title: '楼栋名称',\n      dataIndex: 'name',\n      key: 'name',\n      width: '200px',\n      align: 'center',\n      ellipsis: true,\n      render: (text: string, record: BuildingInformation) => {\n        if (isEdit(record.key as string)) {\n          return (\n              <Form.Item name={'name'} rules={[{required: true, message: '请输入校区名称'}]}>\n                <Input autoFocus placeholder=\"教学楼名称\"/>\n              </Form.Item>\n          );\n        }\n        return text;\n      },\n    }, {\n      title: '楼栋名称别名',\n      dataIndex: 'nameAlias',\n      key: 'nameAlias',\n      width: '200px',\n      align: 'center',\n      ellipsis: true,\n      render: (text: string, record: BuildingInformation) => {\n        if (isEdit(record.key as string)) {\n          return (\n              <Form.Item name={'nameAlias'} rules={[{required: true, message: '请输入校区别名'}]}>\n                <Input autoFocus placeholder=\"英文开头别名\"/>\n              </Form.Item>\n          );\n        }\n        return text;\n      },\n    }, {\n      title: '楼层数量',\n      dataIndex: 'floors',\n      key: 'floors',\n      width: '100px',\n      align: 'center',\n      ellipsis: true,\n      render: (text: number, record: BuildingInformation) => {\n        if (isEdit(record.key as string)) {\n          return (\n              <Form.Item name={'floors'} rules={[{required: true, message: '请输入总计楼层数'}]}>\n                <Input autoFocus placeholder=\"楼层数量\"/>\n              </Form.Item>\n          );\n        }\n        return text;\n      },\n    }, {\n      title: '起始楼层',\n      dataIndex: 'startFloor',\n      key: 'startFloor',\n      width: '100px',\n      align: 'center',\n      ellipsis: true,\n      render: (text: number, record: BuildingInformation) => {\n        if (isEdit(record.key as string)) {\n          return (\n              <Form.Item name={'startFloor'} rules={[{required: true, message: '请输入总计楼层数'}]}>\n                <Input autoFocus placeholder=\"楼层数量\"/>\n              </Form.Item>\n          );\n        }\n        return text;\n      },\n    }, {\n      title: '教室数量',\n      dataIndex: 'classrooms',\n      key: 'classrooms',\n      width: '100px',\n      align: 'center',\n      ellipsis: true,\n      render: (text: ClassroomInformation[], record: BuildingInformation) => {\n        if (isEdit(record.key as string)) {\n          return <></>\n        }\n        return text?.length || 0;\n      },\n    }, {\n      title: '创建时间',\n      dataIndex: 'createTime',\n      key: 'createTime',\n      width: '200px',\n      align: 'center',\n      ellipsis: true,\n      render: (text: Date, record: BuildingInformation) => {\n        if (isEdit(record.key as string)) {\n          return <></>\n        }\n        return text?.toLocaleString();\n      },\n    }, {\n      title: '修改时间',\n      dataIndex: 'lastTime',\n      key: 'lastTime',\n      width: '200px',\n      align: 'center',\n      ellipsis: true,\n      render: (text: Date, record: BuildingInformation) => {\n        if (isEdit(record.key as string)) {\n          return <></>\n        }\n        return text?.toLocaleString();\n      },\n    }, {\n      title: '操作',\n      key: 'action',\n      align: 'center',\n      render: (text: any, record: BuildEdit) => {\n        if (loading) {\n          return null;\n        }\n        if (isEdit(record.key as string)) {\n          if (newEdit) {\n            return (\n                <Space>\n                  <Button type={'primary'} icon={<SaveOutlined/>} onClick={(e) => {\n                    saveBuildSate(record, record.index, true).catch()\n                  }}>添加</Button>\n                  <Popconfirm title=\"是否要取消添加？\" onConfirm={() => {\n                    cancelNewBuildSate(record, record?.index);\n                  }}>\n                    <Button type={'dashed'} icon={<PoweroffOutlined/>}>取消</Button>\n                  </Popconfirm>\n                </Space>\n            );\n          }\n          return (\n              <Space>\n                <Button type={'primary'} icon={<SaveOutlined/>} onClick={(e) => {\n                  saveBuildSate(record, record.index).catch()\n                }}>保存</Button>\n                <Popconfirm title=\"是否要取消编辑？\" onConfirm={() => {\n                  saveCampusSate(record).catch()\n                }}>\n                  <Button type={'dashed'} icon={<PoweroffOutlined/>}>取消</Button>\n                </Popconfirm>\n              </Space>\n          );\n        }\n        return (\n            <Space>\n              <Button type={'primary'} icon={<EditOutlined/>} disabled={editKey != \"\"} onClick={(e) => {\n                setEditKey(record.key as string);\n                formBuild.setFieldsValue({\n                  name: record.name,\n                  nameAlias: record.nameAlias,\n                  floors: record.floors,\n                  startFloor: record.startFloor\n                });\n              }}>编辑</Button>\n              <Popconfirm title=\"是否要删除此行？\" disabled={editKey != \"\"} onConfirm={() => {\n                removeBuildSate(record, record?.index)\n              }}>\n                <Button type={'primary'} danger icon={<DeleteOutlined/>} disabled={editKey != \"\"}>删除</Button>\n              </Popconfirm>\n            </Space>\n        );\n      },\n    },\n  ];\n\n  return (\n\n      <div>\n        <Form form={formCampus} component={false}>\n          <Table<CampusInformation>\n              loading={loading}\n              columns={columnsCampus}\n              dataSource={campus}\n              pagination={false}\n              expandable={{\n                expandedRowRender: (record, index) => {\n                  return (<div>\n                        <Form form={formBuild} component={false}>\n                          <Table<BuildEdit> columns={columnsBuilding} pagination={false} bordered\n                                            dataSource={record?.buildings?.map(value => {\n                                              return {\n                                                ...value,\n                                                index: index,\n                                              }\n                                            })}/>\n                        </Form>\n\n                        <Button style={{width: '100%', marginTop: 16, marginBottom: 8}}\n                                type=\"dashed\" disabled={loading || editKey !== '' || newEdit} onClick={event => {\n                          newBuildSate(record, index)\n                        }}>\n                          <PlusOutlined/> 新增楼栋 </Button>\n                      </div>\n                  )\n                },\n              }}\n\n          />\n        </Form>\n        <div style={{width: '100%'}}>\n\n          <Button style={{width: '50%', marginTop: 16, marginBottom: 8}}\n                  type=\"dashed\" disabled={loading || editKey !== '' || newEdit} onClick={event => {\n            newCampusSate();\n\n          }}>\n            <PlusOutlined/> 新增校区\n          </Button>\n          <Button style={{width: '50%', marginTop: 16, marginBottom: 8}}\n                  type=\"dashed\" onClick={event => {\n            updateCampusSate()\n          }}>\n            <SyncOutlined spin={loading}/> 刷新\n          </Button>\n\n\n        </div>\n\n      </div>\n\n\n  );\n};\n\nexport default CampusAndBuilding;\n","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/ClassroomConfig/ClassroomCategoryEdit.tsx",["267","268","269","270","271"],"import {PlusOutlined} from '@ant-design/icons';\nimport {Button, Input, Popconfirm, Table, message, Form, Space, } from 'antd';\nimport React, {FC, useEffect, useState} from 'react';\n\n\nimport {ColumnsType} from \"antd/es/table\";\nimport {\n  ClassroomCategoryInformation,\n} from \"@/pages/eCard/data\";\nimport {\n  deleteClassroomCategory,\n\n  getClassroomCategory, insertClassroomCategory, updateClassroomCategory,\n\n} from \"@/pages/eCard/service\";\nimport {\n  SyncOutlined,\n  PoweroffOutlined,\n  EditOutlined,\n  DeleteOutlined,\n  SaveOutlined,\n  MinusCircleOutlined\n} from \"@ant-design/icons/lib\";\n\n\n\n\n\nconst title: string = '教室分类预定义';\nconst subTitle: string = '教室类别新增、修改和删除，每个类别可以配置任意数量的设备模板.不能删除已在使用的教室类别!';\n\nconst ClassroomCategoryEdit: FC<any> = () => {\n  const [formCategory] = Form.useForm();\n\n\n  const [loading, setLoading] = useState<boolean>(true);\n  const [editKey, setEditKey] = useState<string>(\"\");\n  const [newEdit, setNewEdit] = useState(false);\n  const [category, setCategory] = useState<ClassroomCategoryInformation[]>([]);\n\n\n  const isEdit = (key: string) => {\n    return key === editKey;\n  }\n\n\n  const newCategorySate = () => {\n    setNewEdit(true);\n    formCategory.setFieldsValue({name: '', equipmentList: []});\n    let n = category.slice();\n    n.push({key: 'new' + category.length});\n    setCategory(n);\n    setEditKey('new' + category.length);\n  }\n\n  const cancelNewCategorySate = () => {\n    let n = category.slice();\n    n.pop();\n    setCategory(n);\n    setEditKey(\"\");\n    setNewEdit(false);\n  }\n\n\n  const saveCategorySate = async (value: ClassroomCategoryInformation, isNew?: boolean) => {\n    try {\n      const item = await formCategory.validateFields() as ClassroomCategoryInformation;\n      // console.log(item)\n      const newData = [...category];\n      let findIndex = newData.findIndex(v => v.key === value.key);\n      // console.log(newData)\n      // console.log(findIndex)\n      if (findIndex > -1) {\n        const v = newData[findIndex];\n        newData.splice(findIndex, 1, {...v, name: item.name,})\n      } else {\n        newData.push({...value, name: item.name,})\n      }\n      // console.log(newData)\n      setLoading(true);\n      if (!!isNew) {\n        insertClassroomCategory({name: item.name as string,}).then(reason => {\n          if (reason?.data.success) {\n            setCategory(newData);\n            setEditKey('');\n            setNewEdit(false);\n            message.success(`新建教室分类:${item.name} 成功`)\n          } else {\n            message.error(`新建教室分类:${item.name} API失败:` + reason?.data.msg)\n          }\n        }).catch(reason => {\n          message.error(`新建教室分类:${item.name} API连接失败:` + reason.toString())\n        }).finally(() => {\n          setLoading(false);\n        })\n      } else {\n        const prev = value.name as string;\n        updateClassroomCategory(prev, {name: item.name as string, }).then(reason => {\n          if (reason?.data.success) {\n            setCategory(newData);\n            setEditKey('');\n            setNewEdit(false);\n            message.success(`教室分类:${prev} 更新}成功`)\n          } else {\n            message.error(`教室分类:${prev} 更新API失败:` + reason?.data.msg)\n          }\n        }).catch(reason => {\n          message.error(`请求更新教室分类:${prev} API连接失败:` + reason.toString())\n        }).finally(() => {\n          setLoading(false);\n        })\n      }\n\n    } catch (e) {\n      // console.log('验证教室分类信息失败', e)\n    }\n  }\n\n\n  const removeCategorySate = (prev: string) => {\n    setLoading(true)\n    deleteClassroomCategory(prev).then((value) => {\n      if (value.data.success) {\n        const newData = [...category];\n        let findIndex = newData.findIndex(v => v.name === prev) || -1;\n        if (findIndex > -1) {\n          newData.splice(findIndex, 1,)\n        } else {\n          newData.pop();\n        }\n        setCategory(newData);\n        message.success(`删除教室分类:${prev} 成功`)\n      } else {\n        message.error(`删除教室分类:${prev} 失败: ${value.data.msg}`)\n      }\n    }, reason => {\n      message.error(`删除教室分类:${prev} 信息api请求失败:${reason.toString()}`)\n    }).finally(() => {\n      setNewEdit(false)\n      setEditKey('')\n      setLoading(false)\n    });\n  }\n\n\n  const updateCategorySate = () => {\n    setLoading(true)\n    getClassroomCategory({}).then((value) => {\n      if (value.data.success) {\n        setCategory(value?.data.resultBody?.map((d => ({\n          ...d, key: d.id,\n\n        }))));\n        message.success('刷新教室分类信息成功')\n      } else {\n        message.error('刷新教室分类信息失败:' + value?.data.msg)\n      }\n    }, reason => {\n      message.error('刷新教室分类信息API请求连接失败:' + reason.toString())\n    }).finally(() => {\n      setNewEdit(false)\n      setEditKey('')\n      setLoading(false)\n    });\n  }\n\n  useEffect(() => {\n    const timeID = setTimeout(() => {\n      getClassroomCategory({}).then((value) => {\n        if (value.data.success) {\n          setCategory(value?.data.resultBody?.map((d => ({\n            ...d, key: d.id,\n          }))));\n          setLoading(false)\n        } else {\n          message.error('初始化教室分类页面失败:' + value?.data.msg)\n        }\n        // }\n      }, reason => {\n        message.error('初始化教室分类页面API请求失败:' + reason.toString())\n      });\n    }, 500);\n    return () => {\n      clearTimeout(timeID)\n    }\n  }, [])\n\n\n  const columnsClassroomCategory: ColumnsType<ClassroomCategoryInformation> = [\n    {\n      title: 'ID',\n      dataIndex: 'id',\n      key: 'id',\n      width: '90px',\n      ellipsis: true,\n      align: 'center',\n      render: (text: string, record: ClassroomCategoryInformation) => {\n        if (isEdit(record.key as string)) {\n          return (\n            <></>\n          );\n        }\n        return text;\n      },\n    }, {\n      title: '类别名称',\n      dataIndex: 'name',\n      key: 'name',\n      width: '120px',\n      align: 'center',\n      ellipsis: true,\n      render: (text: string, record: ClassroomCategoryInformation) => {\n        if (isEdit(record.key as string)) {\n          return (\n            <Form.Item name={'name'} rules={[{required: true, message: '请输入类别名称'}]}>\n              <Input autoFocus placeholder=\"类别名称\"/>\n            </Form.Item>\n          );\n        }\n        return text;\n      },\n    }, {\n      title: '设备数量',\n      dataIndex: 'equipmentList',\n      key: 'equipmentList',\n      width: '80px',\n      align: 'center',\n      ellipsis: true,\n      render: (text: string, record: ClassroomCategoryInformation) => {\n        if (isEdit(record.key as string)) {\n          return (\n            <></>\n          );\n        }\n        return text?.length || 0;\n      },\n    }, {\n      title: '教室数量',\n      dataIndex: 'classrooms',\n      key: 'classrooms',\n      width: '80px',\n      align: 'center',\n      ellipsis: true,\n      render: (text: string, record: ClassroomCategoryInformation) => {\n        if (isEdit(record.key as string)) {\n          return (\n            <></>\n          );\n        }\n        return text?.length || 0;\n      },\n    }, {\n      title: '创建时间',\n      dataIndex: 'createTime',\n      key: 'createTime',\n      width: '180px',\n      align: 'center',\n      ellipsis: true,\n      render: (text: string, record: ClassroomCategoryInformation) => {\n        if (isEdit(record.key as string)) {\n          return (\n            <></>\n          );\n        }\n        return text?.toLocaleString();\n      },\n\n    }, {\n      title: '修改时间',\n      dataIndex: 'lastTime',\n      key: 'lastTime',\n      width: '180px',\n      align: 'center',\n      ellipsis: true,\n      render: (text: string, record: ClassroomCategoryInformation) => {\n        if (isEdit(record.key as string)) {\n          return (\n            <></>\n          );\n        }\n        return text?.toLocaleString();\n      },\n    }, {\n      title: '操作',\n      key: 'action',\n      align: 'center',\n      width: '180px',\n      ellipsis: true,\n      render: (text: any, record: ClassroomCategoryInformation) => {\n        if (loading) {\n          return null;\n        }\n        if (isEdit(record.key as string)) {\n          if (newEdit) {\n            return (\n              <Space>\n                <Button type={'primary'} icon={<SaveOutlined/>} onClick={(e) => {\n                  saveCategorySate(record, true).catch()\n                }}>添加</Button>\n                <Popconfirm title=\"是否要取消添加？\" onConfirm={() => {\n                  cancelNewCategorySate();\n                }}>\n                  <Button type={'dashed'} icon={<PoweroffOutlined/>}>取消</Button>\n                </Popconfirm>\n              </Space>\n            );\n          }\n          return (\n            <Space>\n              <Button type={'primary'} icon={<SaveOutlined/>} onClick={(e) => {\n                saveCategorySate(record, false).catch()\n              }}>保存</Button>\n              <Popconfirm title=\"是否要取消编辑？\" onConfirm={() => {\n                setEditKey(\"\")\n              }}>\n                <Button type={'dashed'} icon={<PoweroffOutlined/>}>取消</Button>\n              </Popconfirm>\n            </Space>\n          );\n        }\n        return (\n          <Space>\n            <Button type={'primary'} icon={<EditOutlined/>} disabled={editKey != \"\"} onClick={(e) => {\n              setEditKey(record.key as string);\n              formCategory.setFieldsValue({name: record.name, nameAlias: record.equipmentList,});\n            }}>编辑</Button>\n            <Popconfirm title=\"是否要删除此行？\" disabled={editKey != \"\"} onConfirm={() => {\n              removeCategorySate(record.name as string)\n            }}>\n              <Button type={'primary'} danger icon={<DeleteOutlined/>} disabled={editKey != \"\"}>删除</Button>\n            </Popconfirm>\n          </Space>\n        );\n      },\n    },\n  ];\n\n\n  return (\n\n      <div>\n        <Form form={formCategory} component={false}>\n          <Table<ClassroomCategoryInformation>\n            loading={loading}\n            columns={columnsClassroomCategory}\n            dataSource={category}\n            pagination={false}\n            expandedRowRender={(record, index) => {\n              return (<div id={'categoryClassroom'}>\n                  <Form.List name={'equipmentList'}>\n                    {\n                      (fields, {add, remove}) => {\n                        let width = document.getElementById('categoryClassroom')?.clientWidth ?\n                          document.getElementById('categoryClassroom')?.clientWidth as number > 700 ?\n                            document.getElementById('categoryClassroom')?.clientWidth as number - 700\n                            : document.getElementById('categoryClassroom')?.clientWidth as number - 64\n                          : 0;\n\n                        return (<div style={{marginBottom:16}}>\n                            {fields.map((field, index) => (\n                              <div\n                                key={field.key} style={{marginBottom:16}}\n                              >\n                                <span>未定义设备&nbsp;:&nbsp;</span>\n                                <Form.Item {...field}\n                                           name={[field.name, 'jsonName']} key={field.fieldKey * 100 + 101}\n                                           noStyle>\n                                  <Input placeholder='请输入设备JSON字段名' style={{width: 180}}/>\n                                </Form.Item>\n                                <span>-</span>\n                                <Form.Item {...field}\n                                           name={[field.name, 'configureName']} key={field.fieldKey * 100 + 102}\n                                           noStyle>\n                                  <Input placeholder=\"请输入设备显示名称\" style={{width: 180}} onChange={event => {\n\n                                  }}/>\n                                </Form.Item>\n                                <span>-</span>\n                                <Form.Item {...field}\n                                           name={[field.name, 'configureJsonName']}\n                                           key={field.fieldKey * 100 + 103}\n                                           noStyle>\n                                  <Input placeholder='请输入设备JSON字段重命名' style={{width: 200}}/>\n                                </Form.Item>\n                                <span>-</span>\n                                <Form.Item {...field}\n                                           name={[field.name, 'arrayConfig']} key={field.fieldKey * 100 + 104}\n                                           noStyle>\n                                  <Input placeholder=\"请输入设备名称集合\"\n                                         style={{\n                                           width\n                                         }}/>\n                                </Form.Item>\n                                <MinusCircleOutlined\n                                  className={'dynamic-delete-button'}\n                                  style={{margin: '0 8px'}}\n                                  onClick={() => {\n                                    console.log(field)\n                                    remove(field.name);\n                                  }}\n                                />\n                              </div>\n\n                            ))}\n                            <Form.Item label={' '} colon={false}>\n                              <Button\n                                type=\"dashed\"\n                                onClick={() => {\n                                  add();\n                                  console.log(fields)\n                                }}\n                                style={{width: 180}}\n                              >\n                                <PlusOutlined/>新增设备\n                              </Button>\n\n                            </Form.Item>\n                          </div>\n                        )\n                      }}\n\n                  </Form.List>\n                  <Button style={{width: '100%', marginTop: 16, marginBottom: 8}}\n                          type=\"dashed\" disabled={loading || editKey !== '' || newEdit} onClick={event => {\n\n                  }}>\n                    <PlusOutlined/> 新增设备 </Button>\n                </div>\n              )\n            }}\n          />\n        </Form>\n        <div style={{width: '100%'}}>\n\n          <Button style={{width: '50%', marginTop: 16, marginBottom: 8}}\n                  type=\"dashed\" disabled={loading || editKey !== '' || newEdit} onClick={event => {\n            newCategorySate();\n\n          }}>\n            <PlusOutlined/> 新增教室类别\n          </Button>\n          <Button style={{width: '50%', marginTop: 16, marginBottom: 8}}\n                  type=\"dashed\" onClick={event => {\n            updateCategorySate()\n          }}>\n            <SyncOutlined spin={loading}/> 刷新\n          </Button>\n\n\n        </div>\n\n      </div>\n\n\n\n  );\n};\n\nexport default ClassroomCategoryEdit;\n","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/ClassroomConfig/ClassroomEdit.tsx",["272","273"],"import React from \"react\";\n\nimport {connect} from \"react-redux\";\nimport {StateType} from \"@/pages/eCard/ClassroomConfig/models/ClassroomEdit\";\n\nimport ProFormSearch, {ProFormSearchItemArrays} from \"@/components/ProTable/proFormSearch\";\nimport {Button, Input, Modal, Popconfirm, Select, Space, Table} from \"antd\";\nimport {Dispatch} from \"redux\"\nimport {ColumnsType} from \"antd/es/table\";\nimport {ClassroomInformation} from \"@/pages/eCard/data\";\nimport {DeleteOutlined, EditOutlined} from \"@ant-design/icons/lib\";\nimport ClassroomForm from \"@/pages/eCard/components/ClassroomForm\";\nimport model from './models/ClassroomEdit'\n\nconst namespace=model.namespace;\n\nconst searchFormItemLayout = {\n  labelCol: {\n    xs: {span: 24},\n    sm: {span: 8},\n  },\n  wrapperCol: {\n    xs: {span: 24},\n    sm: {span: 16},\n  },\n}\n\n\ninterface ClassroomEditProps extends StateType{\n  dispatch: Dispatch;\n\n}\n\ninterface ClassroomEditState {\n  /**\n   * 控制新建对话框显示\n   */\n  classroomModalVisible: boolean;\n}\n\nconst title: string = '教室信息管理';\nconst subTitle: string = '教室基础信息、视频地址、设备配置编辑和查询，为了支持小型低功耗不能识别UTF-8中文编码设备，请设置英文字段别名';\n\nclass ClassroomEdit extends React.Component<ClassroomEditProps, ClassroomEditState> {\n\n  constructor(props: ClassroomEditProps, context: any) {\n    super(props, context);\n    this.state = {classroomModalVisible: false}\n  }\n\n  private columns: ColumnsType<ClassroomInformation> = [\n    {\n      key: 'name',\n      title: '教室完整名称',\n      dataIndex: 'name',\n      align: 'center',\n      ellipsis: true,\n      fixed: 'left',\n      width: 240,\n      render: (value, record) => {\n        return (record?.campus || '') + (record?.buildName || '') + record.floor + 'F' + value;\n      }\n    }, {\n      key: 'nameAlias',\n      title: '字段别名',\n      dataIndex: 'nameAlias',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n    }, {\n      key: 'terminalIP',\n      title: '终端IP',\n      dataIndex: 'terminalIP',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n    }, {\n      key: 'terminalID',\n      title: '终端序列号',\n      dataIndex: 'terminalID',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n    }, {\n      key: 'rtsp',\n      title: '视频源',\n      dataIndex: 'rtsp',\n      align: 'center',\n      ellipsis: true,\n      width: 90,\n      render: (value, record) => {\n        return (\n            !!value ? <Button size={'small'}>查看</Button> : '-'\n        )\n      }\n    }, {\n      key: 'equipmentList',\n      title: '设备列表',\n      dataIndex: 'equipmentList',\n      align: 'center',\n      ellipsis: true,\n      width: 90,\n      render: (value, record) => {\n        return (\n            !!value ? <Button size={'small'}>查看</Button> : '-'\n        )\n      }\n    }, {\n      key: 'category',\n      title: '类别',\n      dataIndex: 'category',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n    }, {\n      key: 'createTime',\n      title: '创建时间',\n      dataIndex: 'createTime',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n      render: (value, record) => {\n        return value?.toLocaleString();\n      }\n    }, {\n      key: 'lastTime',\n      title: '修改时间',\n      dataIndex: 'lastTime',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n      render: (value, record) => {\n        return value?.toLocaleString();\n      }\n    }, {\n      key: 'action',\n      title: '操作',\n      align: 'center',\n      ellipsis: true,\n      width: 220,\n      render: (value, record) => {\n        return (\n            <Space>\n              <Button type={'primary'} icon={<EditOutlined/>} onClick={(e) => {\n\n              }}>编辑</Button>\n              <Popconfirm title=\"是否要删除此教室？\" onConfirm={() => {\n              }}>\n                <Button type={'primary'} danger icon={<DeleteOutlined/>}>删除</Button>\n              </Popconfirm>\n            </Space>\n        )\n      }\n    },\n  ]\n\n\n  render() {\n    const {isHideForm, data, formSearch, pageSize, categoryOptions} = this.props;\n    const {dispatch,} = this.props;\n    const searchItem: ProFormSearchItemArrays = [\n      {\n        label: '教室名称',\n        name: 'name',\n        children: <Input style={{width: '100%'}} placeholder={'请输入教室名称'}/>, ...searchFormItemLayout\n      },\n      {\n        label: '教室类别', name: 'category', children: <Select placeholder={'请选择教室类别'} onFocus={() => {\n          dispatch({type: 'classroomEdit/queryCategoryOptions'})\n        }} options={categoryOptions.map(value => {\n          return {label: value, value}\n        })}\n                                                           style={{width: '60%',}}/>, ...searchFormItemLayout\n      },\n      {\n        label: '教室楼层', name: 'floor', children: <Input style={{width: '100%'}}\n                                                       placeholder={'请输入教室楼层'}/>, ...searchFormItemLayout,\n        rules: [{required: false, message: '请输入非0整数', pattern: /^-?[1-9][0-9]*$/}],\n      },\n      {\n        label: '教学楼名称', name: 'build', children: <Input style={{width: '100%'}}\n                                                        placeholder={'请输入教学楼名称'}/>, ...searchFormItemLayout\n      },\n      {\n        label: '校区名称', name: 'campus', children: <Input style={{width: '100%'}}\n                                                        placeholder={'请输入校区名称'}/>, ...searchFormItemLayout\n      },\n\n    ];\n    return (\n        <div>\n          <ProFormSearch initialValues={formSearch} childrenItem={searchItem} isHide={isHideForm}\n                         dispatch={dispatch} namespace={namespace} pageSize={pageSize}/>\n          <div style={{textAlign: 'right', padding: '8px 16px 0 16px'}}>\n            <Space><Button type={'primary'} onClick={event => {\n              this.setState({classroomModalVisible: true})\n            }}>新建教室</Button><Button type={'primary'}>批量导入</Button></Space>\n            <Modal title={'创建新教室'} width={800} onCancel={e => {\n              this.setState({classroomModalVisible: false})\n            }} onOk={e => {\n              this.setState({classroomModalVisible: false})\n            }} visible={this.state.classroomModalVisible}>\n              <ClassroomForm categoryOptions={categoryOptions} categoryFocus={() => {\n                dispatch({type: 'classroomEdit/queryCategoryOptions'})\n              }}/>\n            </Modal>\n          </div>\n          <div className={'site-custom-background'} style={{marginTop: 8}}>\n\n            <Table<ClassroomInformation> columns={this.columns} dataSource={data?.data?.map((value => {\n              return {...value, key: value.id}\n            }))} bordered scroll={{x: 700,}}\n\n                                         pagination={{\n                                           current: data?.page,\n                                           pageSize: pageSize,\n                                           total: data?.totalRows,\n                                           pageSizeOptions: ['10', '20', '30', '50'],\n                                           showLessItems: true,\n                                           showSizeChanger: true,\n                                           showQuickJumper: true,\n                                           showTotal: (total, range) => `总计${total}个教室`,\n                                           onShowSizeChange: (current, size) => {\n                                             dispatch({\n                                               type: 'classroomEdit/querySubmit',\n                                               payload: {...formSearch, page: current, pageSize: size}\n                                             })\n                                             dispatch({\n                                               type: 'classroomEdit/setSateProperty',\n                                               payload: {dataIndex: 'pageSize', value: size}\n                                             })\n                                           },\n                                           onChange: (page, pageSize) => {\n                                             dispatch({\n                                               type: 'classroomEdit/querySubmit',\n                                               payload: {...formSearch, page, pageSize}\n                                             })\n                                           }\n\n                                         }}\n            />\n          </div>\n\n        </div>\n    );\n  }\n}\n\nexport default connect((\n    state:any) => {\n      return {\n        ...state[namespace],\n\n      }\n    }\n\n)(ClassroomEdit);\n","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/components/ClassroomForm.tsx",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/ClassroomConfig/models/ClassroomEdit.ts",["274","275","276"],"import {Effect, Reducer} from '@/redux/data';\nimport {ClassroomCategoryInformation, ClassroomInformation} from \"@/pages/eCard/data\";\nimport {ProFormFields} from \"@/components/ProTable/proFormSearch\";\nimport {getClassroom,} from \"@/pages/eCard/service\";\nimport request, {Restful} from \"@/utils/request\";\nimport {setFormSearch, setSateProperty} from \"@/components/ProTable/reducers\";\nimport {ProStateType, ProTableModelType} from \"@/components/ProTable/data\";\n\nexport interface FormSearchSateType extends ProFormFields {\n  name?: string;\n  category?: string;\n  floor?: number;\n  build?: string;\n  campus?: string;\n}\n\n\nexport interface StateType extends ProStateType<ClassroomInformation, FormSearchSateType> {\n  /**\n   * category option value\n   */\n  categoryOptions: string[];\n}\n\ninterface ExtendModel {\n  effects: {\n    queryCategoryOptions: Effect;\n  }\n}\n\n\nconst Model: ProTableModelType<ExtendModel, StateType> = {\n  namespace: 'eCard/ClassroomConfig/ClassroomEdit',\n  state: {\n    data: {page: 0, pageSize: 10, totalRows: 0, totalPages: 0, data: []},\n    pageSize: 10,\n    isHideForm: true,\n    formSearch: {fuzzy: false},\n    categoryOptions: [],\n  },\n\n  effects: {\n    * querySubmit({payload}, {call, put, select}) {\n      const response = yield call(getClassroom, payload);\n      // const state=yield select((e)=>{\n      //   console.log(e)\n      //   return e['classroomEdit']\n      // })\n      // console.log(state)\n      yield put({type: 'setSateProperty', payload: {dataIndex: 'data', value: {}}})\n      if (response && response.success && (response.resultBody != undefined)) {\n        console.log(response)\n        yield put({type: 'setSateProperty', payload: {dataIndex: 'data', value: response.resultBody}})\n      }\n    },\n    * queryCategoryOptions({payload}, {call, put, select}) {\n      const response = yield call(() => {\n        return request.get<Restful<ClassroomCategoryInformation[]>>\n        ('/api/information/classroom/config/category', {params: {noSubClassroom: true}});\n      }, payload);\n      if (response && response.success && (response.resultBody != undefined)) {\n        console.log(response)\n        yield put({\n          type: 'setSateProperty', payload: {\n            dataIndex: 'categoryOptions', value: response?.resultBody?.map((value: ClassroomCategoryInformation) => {\n              return value.name;\n            })\n          }\n        })\n      }\n    },\n  },\n\n  reducers: {\n    setFormSearch,\n    setSateProperty\n  }\n};\n\nexport default Model;\n","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/PeopleEdit/administrator.tsx",["277","278","279"],"import React from \"react\";\nimport {connect} from \"react-redux\";\nimport ProFormSearch, {ProFormSearchItemArrays} from \"@/components/ProTable/proFormSearch\";\nimport {Button, DatePicker, Input, Popconfirm, Select, Space, Table} from \"antd\";\nimport {Dispatch} from \"redux\";\nimport {ColumnsType} from \"antd/es/table\";\nimport {AdminInformationType, ICInformation,} from \"@/pages/eCard/data\";\nimport {DeleteOutlined, EditOutlined} from \"@ant-design/icons/lib\";\nimport {StateType} from \"./models/administrator\"\nimport {icColumns, SexualityPredefine} from \"@/pages/eCard/global\";\nimport ProTable from \"@/components/ProTable/proTable\";\nimport model from \"./models/administrator\"\nimport {SexualityPredefineType} from \"../data\";\n\nconst namespace = model.namespace;\nconst searchFormItemLayout = {\n  labelCol: {\n    xs: {span: 24},\n    sm: {span: 8},\n  },\n  wrapperCol: {\n    xs: {span: 24},\n    sm: {span: 16},\n  },\n}\n\n\ninterface AdministratorProps extends StateType {\n  dispatch: Dispatch;\n\n\n}\n\nconst title: string = '管理员信息配置';\nconst subTitle: string = '管理员基础信息查询、编辑、创建、删除等操作，同时可以查询到人员名下所有IC卡的持卡信息';\n\nclass Administrator extends React.Component<AdministratorProps, any> {\n\n  constructor(props: AdministratorProps, context: any) {\n    super(props, context);\n    // console.log(props.match)\n    // let {id}=useParams();\n    // console.log(id)\n  }\n\n  private columns: ColumnsType<AdminInformationType> = [\n    {\n      key: 'name',\n      title: '姓名',\n      dataIndex: 'name',\n      align: 'center',\n      ellipsis: true,\n      fixed: 'left',\n      width: 120,\n    }, {\n      key: 'sex',\n      title: '性别',\n      dataIndex: 'sex',\n      align: 'center',\n      ellipsis: true,\n      width: 65,\n      render: (value => {\n        return SexualityPredefine[value as SexualityPredefineType]\n      })\n    }, {\n      key: 'employeeID',\n      title: '工号',\n      dataIndex: 'employeeID',\n      align: 'center',\n      ellipsis: true,\n      width: 150,\n    }, {\n      key: 'cardID',\n      title: '身份证',\n      dataIndex: 'cardID',\n      align: 'center',\n      ellipsis: true,\n      width: 180,\n    }, {\n      key: 'departmentName',\n      title: '部门',\n      dataIndex: 'departmentName',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n    }, {\n      key: 'grade',\n      title: '权限级别',\n      dataIndex: 'grade',\n      align: 'center',\n      ellipsis: true,\n      width: 90,\n      render: (text) => {\n        return text && (text + '级')\n      }\n    }, {\n      key: 'post',\n      title: '职位',\n      dataIndex: 'post',\n      align: 'center',\n      ellipsis: true,\n      width: 90,\n    }, {\n      key: 'ics',\n      title: '持卡数量',\n      dataIndex: 'ics',\n      align: 'center',\n      ellipsis: true,\n      width: 90,\n      render: (value, record) => {\n        return (\n            !!value ? value.length : 0\n        )\n      }\n    }, {\n      key: 'phone',\n      title: '电话',\n      dataIndex: 'phone',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n    }, {\n      key: 'mail',\n      title: '邮箱',\n      dataIndex: 'mail',\n      align: 'center',\n      ellipsis: true,\n      width: 240,\n    }, {\n      key: 'status',\n      title: '状态',\n      dataIndex: 'status',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n    }, {\n      key: 'hire',\n      title: '入职日期',\n      dataIndex: 'hire',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n      render: (value: Date, record) => {\n        return value?.toLocaleString();\n      }\n    }, {\n      key: 'birth',\n      title: '出生日期',\n      dataIndex: 'birth',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n      render: (value: Date, record) => {\n        return value?.toLocaleString();\n      }\n    }, {\n      key: 'remarks',\n      title: '备注',\n      dataIndex: 'remarks',\n      align: 'center',\n      ellipsis: true,\n      width: 240,\n    }, {\n      key: 'createTime',\n      title: '创建时间',\n      dataIndex: 'createTime',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n      render: (value, record) => {\n        return value?.toLocaleString();\n      }\n    }, {\n      key: 'lastTime',\n      title: '修改时间',\n      dataIndex: 'lastTime',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n      render: (value, record) => {\n        return value?.toLocaleString();\n      }\n    }, {\n      key: 'action',\n      title: '操作',\n      align: 'center',\n      ellipsis: true,\n      width: 220,\n      render: (value, record) => {\n        return (\n            <Space>\n              <Button type={'primary'} icon={<EditOutlined/>} onClick={(e) => {\n\n              }}>编辑</Button>\n              <Popconfirm title=\"是否要删除此管理员？\" onConfirm={() => {\n              }}>\n                <Button type={'primary'} danger icon={<DeleteOutlined/>}>删除</Button>\n              </Popconfirm>\n            </Space>\n        )\n      }\n    },\n  ]\n\n\n  render() {\n    const {isHideForm, data, formSearch, pageSize} = this.props;\n    const {dispatch,} = this.props;\n    const searchItem: ProFormSearchItemArrays = [\n      {\n        label: '姓名',\n        name: 'name',\n        children: <Input style={{width: '100%'}} placeholder={'请输入管理员姓名'}/>, ...searchFormItemLayout\n      }, {\n        label: '部门', name: 'departmentName', children: <Select placeholder={'请选择所属部门'}\n                                                               style={{width: '100%'}}/>, ...searchFormItemLayout\n      }, {\n        label: '工号', name: 'employeeID', children: <Input style={{width: '100%'}}\n                                                          placeholder={'请输入管理员工号'}/>, ...searchFormItemLayout,\n      }, {\n        label: '性别', name: 'sex', children: <Select placeholder={'请选择性别'}\n                                                    style={{width: '30%'}}\n                                                    options={[{label: '男', value: 'male'}, {\n                                                      label: '女',\n                                                      value: 'female'\n                                                    }]}/>, ...searchFormItemLayout\n      }, {\n        label: '权限级别', name: 'grade', children: <Input style={{width: '100%'}}\n                                                       placeholder={'请输入权限级别'}/>, ...searchFormItemLayout,\n        rules: [{required: false, message: '请输入非0正整数', pattern: /^[1-9][0-9]*$/}],\n      }, {\n        label: '入职日期',\n        name: 'hire',\n        children: <DatePicker.RangePicker style={{width: '100%'}}/>, ...searchFormItemLayout\n      }, {\n        label: '身份证', name: 'cardID', children: <Input style={{width: '100%'}}\n                                                       placeholder={'请输入身份证'}/>, ...searchFormItemLayout\n      }, {\n        label: '职位', name: 'post', children: <Input style={{width: '100%'}}\n                                                    placeholder={'请输入职位'}/>, ...searchFormItemLayout\n      }, {\n        label: '电话', name: 'phone', children: <Input style={{width: '100%'}}\n                                                     placeholder={'请输入电话'}/>, ...searchFormItemLayout\n      }, {\n        label: '邮箱', name: 'mail', children: <Input style={{width: '100%'}}\n                                                    placeholder={'请输入邮箱'}/>, ...searchFormItemLayout\n      }, {\n        label: '状态', name: 'status', children: <Input style={{width: '100%'}}\n                                                      placeholder={'请输入状态'}/>, ...searchFormItemLayout\n      },\n\n    ];\n    return (\n        <div>\n          <ProFormSearch initialValues={formSearch} childrenItem={searchItem} isHide={isHideForm}\n                         namespace={namespace} dispatch={dispatch} pageSize={pageSize}/>\n          <div style={{textAlign: 'right', padding: '8px 16px 0 16px'}}>\n            <Space><Button type={'primary'}>新建管理员</Button><Button type={'primary'}>批量导入</Button></Space></div>\n          <div className={'site-custom-background'} style={{marginTop: 8}}>\n            <ProTable<AdminInformationType> title={'管理员'} namespace={'peopleEditAdministrator'} data={data}\n                                            columns={this.columns} dispatch={dispatch}\n                                            pageSize={pageSize} formSearch={formSearch}\n                                            tableProps={{\n                                              expandable: {\n                                                rowExpandable: (record) => (!!record?.ics?.length && record?.ics?.length > 0),\n                                                expandedRowRender: (record, index) => {\n                                                  return <Table<ICInformation> bordered pagination={false}\n                                                                               columns={icColumns}\n                                                                               dataSource={record?.ics?.map(value => {\n                                                                                 return {...value, key: value.id}\n                                                                               })} style={{\n                                                    marginTop: 32,\n                                                    marginBottom: 32\n                                                  }}/>\n                                                }\n                                              },\n\n                                            }}/>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default connect(\n    (\n        state: any) => {\n      return {\n        ...state[namespace],\n\n      }\n    })(Administrator);\n\n\n\n","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/PeopleEdit/temporary.tsx",["280","281","282"],"import React from \"react\";\n\nimport {connect} from \"react-redux\";\n\nimport ProFormSearch, {ProFormSearchItemArrays} from \"@/components/ProTable/proFormSearch\";\nimport {Button,  Input, Popconfirm, Select, Space, Table} from \"antd\";\nimport {Dispatch} from \"redux\";\nimport {ColumnsType} from \"antd/es/table\";\nimport {ICInformation, TemporaryInformationType,} from \"@/pages/eCard/data\";\nimport {DeleteOutlined, EditOutlined} from \"@ant-design/icons/lib\";\nimport Model ,{StateType} from \"./models/maintenance\"\nimport {icColumns, SexualityPredefine} from \"@/pages/eCard/global\";\nimport ProTable from \"@/components/ProTable/proTable\";\nimport {SexualityPredefineType} from \"../data\";\n\nconst namespace=Model.namespace;\nconst searchFormItemLayout = {\n  labelCol: {\n    xs: {span: 24},\n    sm: {span: 8},\n  },\n  wrapperCol: {\n    xs: {span: 24},\n    sm: {span: 16},\n  },\n}\n\n\ninterface TemporaryProps extends StateType{\n\n  dispatch: Dispatch;\n\n}\n\nconst title: string = '临时人员信息配置';\nconst subTitle: string = '临时人员基础信息查询、编辑、创建、删除等操作，同时可以查询到人员名下所有IC卡的持卡信息';\n\nclass Temporary extends React.Component<TemporaryProps, any> {\n\n  constructor(props: TemporaryProps, context: any) {\n    super(props, context);\n  }\n\n  private columns: ColumnsType<TemporaryInformationType> = [\n    {\n      key: 'name',\n      title: '姓名',\n      dataIndex: 'name',\n      align: 'center',\n      ellipsis: true,\n      fixed: 'left',\n      width: 120,\n    }, {\n      key: 'sex',\n      title: '性别',\n      dataIndex: 'sex',\n      align: 'center',\n      ellipsis: true,\n      width: 65,\n      render: (value => {\n        return SexualityPredefine[value as SexualityPredefineType]\n      })\n    }, {\n      key: 'cardID',\n      title: '身份证',\n      dataIndex: 'cardID',\n      align: 'center',\n      ellipsis: true,\n      width: 180,\n    }, {\n      key: 'department',\n      title: '工作单位',\n      dataIndex: 'department',\n      align: 'center',\n      ellipsis: true,\n      width: 240,\n    }, {\n      key: 'ics',\n      title: '持卡数量',\n      dataIndex: 'ics',\n      align: 'center',\n      ellipsis: true,\n      width: 90,\n      render: (value, record) => {\n        return (\n          !!value ? value.length : 0\n        )\n      }\n    }, {\n      key: 'phone',\n      title: '电话',\n      dataIndex: 'phone',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n    }, {\n      key: 'mail',\n      title: '邮箱',\n      dataIndex: 'mail',\n      align: 'center',\n      ellipsis: true,\n      width: 240,\n    }, {\n      key: 'remarks',\n      title: '备注',\n      dataIndex: 'remarks',\n      align: 'center',\n      ellipsis: true,\n      width: 240,\n    }, {\n      key: 'createTime',\n      title: '创建时间',\n      dataIndex: 'createTime',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n      render: (value, record) => {\n        return value?.toLocaleString();\n      }\n    }, {\n      key: 'lastTime',\n      title: '修改时间',\n      dataIndex: 'lastTime',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n      render: (value, record) => {\n        return value?.toLocaleString();\n      }\n    }, {\n      key: 'action',\n      title: '操作',\n      align: 'center',\n      ellipsis: true,\n      width: 220,\n      render: (value, record) => {\n        return (\n          <Space>\n            <Button type={'primary'} icon={<EditOutlined/>} onClick={(e) => {\n\n            }}>编辑</Button>\n            <Popconfirm title=\"是否要删除此临时人员？\" onConfirm={() => {\n            }}>\n              <Button type={'primary'} danger icon={<DeleteOutlined/>}>删除</Button>\n            </Popconfirm>\n          </Space>\n        )\n      }\n    },\n  ]\n\n\n  render() {\n    const {isHideForm, data, formSearch, pageSize} = this.props;\n    const {dispatch, } = this.props;\n    const searchItem: ProFormSearchItemArrays = [\n      {\n        label: '姓名',\n        name: 'name',\n        children: <Input style={{width: '100%'}} placeholder={'请输入临时人员姓名'}/>, ...searchFormItemLayout\n      }, {\n        label: '工作单位', name: 'departmentName', children: <Input placeholder={'请输入工作单位'}\n                                                                style={{width: '100%'}}/>, ...searchFormItemLayout\n      },  {\n        label: '身份证', name: 'cardID', children: <Input style={{width: '100%'}}\n                                                       placeholder={'请输入身份证'}/>, ...searchFormItemLayout\n      }, {\n        label: '性别', name: 'sex', children: <Select placeholder={'请选择性别'}\n                                                    style={{width: '120px'}}\n                                                    options={[{label: '男', value: 'male'}, {\n                                                      label: '女',\n                                                      value: 'female'\n                                                    }]}/>, ...searchFormItemLayout\n      },{\n        label: '电话', name: 'phone', children: <Input style={{width: '100%'}}\n                                                     placeholder={'请输入电话'}/>, ...searchFormItemLayout\n      }, {\n        label: '邮箱', name: 'mail', children: <Input style={{width: '100%'}}\n                                                    placeholder={'请输入邮箱'}/>, ...searchFormItemLayout\n      },\n\n    ];\n    return (<div >\n        <ProFormSearch initialValues={formSearch} childrenItem={searchItem} isHide={isHideForm}\n                       namespace={'PeopleEditTemporary'} dispatch={dispatch} pageSize={pageSize}/>\n        <div style={{textAlign: 'right', padding: '8px 16px 0 16px'}}>\n          <Space><Button type={'primary'}>新建临时人员</Button><Button type={'primary'}>批量导入</Button></Space></div>\n        <div className={'site-custom-background'} style={{marginTop: 8}}>\n          <ProTable<TemporaryInformationType> title={'临时人员'} namespace={'PeopleEditTemporary'} data={data}\n                                                columns={this.columns}  dispatch={dispatch}\n                                                pageSize={pageSize} formSearch={formSearch}\n                                                tableProps={{\n                                                  expandable: {\n                                                    rowExpandable: (record) => (!!record?.ics?.length && record?.ics?.length > 0),\n                                                    expandedRowRender: (record, index) => {\n                                                      return <Table<ICInformation> bordered pagination={false}\n                                                                                   columns={icColumns}\n                                                                                   dataSource={record?.ics?.map(value => {\n                                                                                             return {\n                                                                                               ...value,\n                                                                                               key: value.id\n                                                                                             }\n                                                                                           })} style={{\n                                                        marginTop: 32,\n                                                        marginBottom: 32\n                                                      }}/>\n                                                    }\n                                                  },\n\n                                                }}/>\n\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(\n    (\n        state: any) => {\n      return {\n        ...state[namespace],\n\n      }\n    })(Temporary);\n\n\n\n","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/PeopleEdit/teacher.tsx",["283","284","285"],"/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/PeopleEdit/maintenance.tsx",["286","287"],"import React from \"react\";\n\nimport {connect} from \"react-redux\";\n\nimport ProFormSearch, {ProFormSearchItemArrays} from \"@/components/ProTable/proFormSearch\";\nimport {Button, Input, Popconfirm, Select, Space, Table} from \"antd\";\nimport {Dispatch} from \"redux\";\nimport {ColumnsType} from \"antd/es/table\";\nimport {ICInformation, MaintenanceInformationType,} from \"@/pages/eCard/data\";\nimport {DeleteOutlined, EditOutlined} from \"@ant-design/icons/lib\";\nimport {StateType} from \"./models/maintenance\"\nimport {icColumns, SexualityPredefine} from \"@/pages/eCard/global\";\nimport ProTable from \"@/components/ProTable/proTable\";\nimport model from \"./models/maintenance\"\nimport {SexualityPredefineType} from \"../data\";\n\nconst namespace = model.namespace;\nconst searchFormItemLayout = {\n  labelCol: {\n    xs: {span: 24},\n    sm: {span: 8},\n  },\n  wrapperCol: {\n    xs: {span: 24},\n    sm: {span: 16},\n  },\n}\n\n\ninterface MaintenanceProps extends StateType {\n\n  dispatch: Dispatch;\n\n}\n\nconst title: string = '维护人员信息配置';\nconst subTitle: string = '维护人员基础信息查询、编辑、创建、删除等操作，同时可以查询到人员名下所有IC卡的持卡信息';\n\nclass Maintenance extends React.Component<MaintenanceProps, any> {\n\n  constructor(props: MaintenanceProps, context: any) {\n    super(props, context);\n    console.log(props)\n  }\n\n  private columns: ColumnsType<MaintenanceInformationType> = [\n    {\n      key: 'name',\n      title: '姓名',\n      dataIndex: 'name',\n      align: 'center',\n      ellipsis: true,\n      fixed: 'left',\n      width: 120,\n    }, {\n      key: 'sex',\n      title: '性别',\n      dataIndex: 'sex',\n      align: 'center',\n      ellipsis: true,\n      width: 65,\n      render: (value => {\n        return SexualityPredefine[value as SexualityPredefineType]\n      })\n    }, {\n      key: 'cardID',\n      title: '身份证',\n      dataIndex: 'cardID',\n      align: 'center',\n      ellipsis: true,\n      width: 180,\n    }, {\n      key: 'department',\n      title: '工作单位',\n      dataIndex: 'department',\n      align: 'center',\n      ellipsis: true,\n      width: 240,\n    }, {\n      key: 'ics',\n      title: '持卡数量',\n      dataIndex: 'ics',\n      align: 'center',\n      ellipsis: true,\n      width: 90,\n      render: (value, record) => {\n        return (\n            !!value ? value.length : 0\n        )\n      }\n    }, {\n      key: 'phone',\n      title: '电话',\n      dataIndex: 'phone',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n    }, {\n      key: 'mail',\n      title: '邮箱',\n      dataIndex: 'mail',\n      align: 'center',\n      ellipsis: true,\n      width: 240,\n    }, {\n      key: 'remarks',\n      title: '备注',\n      dataIndex: 'remarks',\n      align: 'center',\n      ellipsis: true,\n      width: 240,\n    }, {\n      key: 'createTime',\n      title: '创建时间',\n      dataIndex: 'createTime',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n      render: (value, record) => {\n        return value?.toLocaleString();\n      }\n    }, {\n      key: 'lastTime',\n      title: '修改时间',\n      dataIndex: 'lastTime',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n      render: (value, record) => {\n        return value?.toLocaleString();\n      }\n    }, {\n      key: 'action',\n      title: '操作',\n      align: 'center',\n      ellipsis: true,\n      width: 220,\n      render: (value, record) => {\n        return (\n            <Space>\n              <Button type={'primary'} icon={<EditOutlined/>} onClick={(e) => {\n\n              }}>编辑</Button>\n              <Popconfirm title=\"是否要删除此维护？\" onConfirm={() => {\n              }}>\n                <Button type={'primary'} danger icon={<DeleteOutlined/>}>删除</Button>\n              </Popconfirm>\n            </Space>\n        )\n      }\n    },\n  ]\n\n\n  render() {\n    const {isHideForm, data, formSearch, pageSize} = this.props;\n    const {dispatch,} = this.props;\n    const searchItem: ProFormSearchItemArrays = [\n      {\n        label: '姓名',\n        name: 'name',\n        children: <Input style={{width: '100%'}} placeholder={'请输入维护人员姓名'}/>, ...searchFormItemLayout\n      }, {\n        label: '工作单位', name: 'departmentName', children: <Input placeholder={'请输入工作单位'}\n                                                                style={{width: '100%'}}/>, ...searchFormItemLayout\n      }, {\n        label: '身份证', name: 'cardID', children: <Input style={{width: '100%'}}\n                                                       placeholder={'请输入身份证'}/>, ...searchFormItemLayout\n      }, {\n        label: '性别', name: 'sex', children: <Select placeholder={'请选择性别'}\n                                                    style={{width: '120px'}}\n                                                    options={[{label: '男', value: 'male'}, {\n                                                      label: '女',\n                                                      value: 'female'\n                                                    }]}/>, ...searchFormItemLayout\n      }, {\n        label: '电话', name: 'phone', children: <Input style={{width: '100%'}}\n                                                     placeholder={'请输入电话'}/>, ...searchFormItemLayout\n      }, {\n        label: '邮箱', name: 'mail', children: <Input style={{width: '100%'}}\n                                                    placeholder={'请输入邮箱'}/>, ...searchFormItemLayout\n      },\n\n    ];\n    return (\n        <div><ProFormSearch initialValues={formSearch} childrenItem={searchItem} isHide={isHideForm}\n                            namespace={namespace} dispatch={dispatch} pageSize={pageSize}/>\n          <div style={{textAlign: 'right', padding: '8px 16px 0 16px'}}>\n            <Space><Button type={'primary'}>新建维护人员</Button><Button type={'primary'}>批量导入</Button></Space></div>\n          <div className={'site-custom-background'} style={{marginTop: 8}}>\n            <ProTable<MaintenanceInformationType> title={'维护人员'} namespace={'PeopleEditMaintenance'} data={data}\n                                                  columns={this.columns} dispatch={dispatch}\n                                                  pageSize={pageSize} formSearch={formSearch}\n                                                  tableProps={{\n                                                    expandable: {\n                                                      rowExpandable: (record) => (!!record?.ics?.length && record?.ics?.length > 0),\n                                                      expandedRowRender: (record, index) => {\n                                                        return <Table<ICInformation> bordered pagination={false}\n                                                                                     columns={icColumns}\n                                                                                     dataSource={record?.ics?.map(value => {\n                                                                                       return {\n                                                                                         ...value,\n                                                                                         key: value.id\n                                                                                       }\n                                                                                     })} style={{\n                                                          marginTop: 32,\n                                                          marginBottom: 32\n                                                        }}/>\n                                                      }\n                                                    },\n\n                                                  }}/>\n\n          </div>\n        </div>\n\n\n    );\n  }\n}\n\nexport default connect(\n    (\n        state: any) => {\n      return {\n        ...state[namespace],\n\n      }\n    })(Maintenance);\n\n\n\n","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/PeopleEdit/student.tsx",["288","289","290"],"import React from \"react\";\n\nimport {connect} from \"react-redux\";\nimport Model ,{StateType} from \"./models/student\";\n\nimport ProFormSearch, {ProFormSearchItemArrays} from \"@/components/ProTable/proFormSearch\";\nimport {Button, DatePicker, Input, Popconfirm, Select, Space, Table} from \"antd\";\nimport {Dispatch, } from \"redux\";\nimport {ColumnsType} from \"antd/es/table\";\nimport {\n  ICInformation,\n  StudentInformationType\n} from \"@/pages/eCard/data\";\nimport {DeleteOutlined, EditOutlined} from \"@ant-design/icons/lib\";\nimport {icColumns, SexualityPredefine} from \"@/pages/eCard/global\";\nimport ProTable from \"@/components/ProTable/proTable\";\nimport {SexualityPredefineType} from \"../data\";\n\nconst namespace=Model.namespace;\n\n\nconst searchFormItemLayout = {\n  labelCol: {\n    xs: {span: 24},\n    sm: {span: 8},\n  },\n  wrapperCol: {\n    xs: {span: 24},\n    sm: {span: 16},\n  },\n}\n\n\ninterface StudentProps extends StateType{\n  dispatch: Dispatch;\n\n}\n\nconst title: string = '学生信息管理';\nconst subTitle: string = '学生基础信息查询、编辑、创建、删除等操作，同时可以查询到每个学生名下所有IC卡的持卡信息';\n\nclass Student extends React.Component<StudentProps, any> {\n\n  constructor(props: StudentProps, context: any) {\n    super(props, context);\n  }\n\n  private columns: ColumnsType<StudentInformationType> = [\n    {\n      key: 'name',\n      title: '姓名',\n      dataIndex: 'name',\n      align: 'center',\n      ellipsis: true,\n      fixed: 'left',\n      width: 120,\n    }, {\n      key: 'sex',\n      title: '性别',\n      dataIndex: 'sex',\n      align: 'center',\n      ellipsis: true,\n      width: 65,\n      render: (value => {\n        return SexualityPredefine[value as SexualityPredefineType]\n      })\n    }, {\n      key: 'studentID',\n      title: '学籍编号',\n      dataIndex: 'employeeID',\n      align: 'center',\n      ellipsis: true,\n      width: 150,\n    }, {\n      key: 'cardID',\n      title: '身份证',\n      dataIndex: 'cardID',\n      align: 'center',\n      ellipsis: true,\n      width: 180,\n    }, {\n      key: 'departmentName',\n      title: '院系',\n      dataIndex: 'classBaseInformation',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n      render: (text) => {\n        return text?.classBaseInformation?.departmentName\n      }\n    }, {\n      key: 'isGraduate',\n      title: '是否毕业',\n      dataIndex: 'isGraduate',\n      align: 'center',\n      ellipsis: true,\n      width: 90,\n      render: (text) => {\n        return text && (text?'毕业':'在校')\n      }\n    }, {\n      key: 'className',\n      title: '班级',\n      dataIndex: 'className',\n      align: 'center',\n      ellipsis: true,\n      width: 150,\n    }, {\n      key: 'leader',\n      title: '班主任',\n      dataIndex: 'classBaseInformation',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n      render: (text) => {\n        return text?.classBaseInformation?.leaderName\n      }\n    },{\n      key: 'ics',\n      title: '持卡数量',\n      dataIndex: 'ics',\n      align: 'center',\n      ellipsis: true,\n      width: 90,\n      render: (value, record) => {\n        return (\n          !!value ? value.length : 0\n        )\n      }\n    }, {\n      key: 'phone',\n      title: '电话',\n      dataIndex: 'phone',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n    }, {\n      key: 'mail',\n      title: '邮箱',\n      dataIndex: 'mail',\n      align: 'center',\n      ellipsis: true,\n      width: 240,\n    }, {\n      key: 'status',\n      title: '状态',\n      dataIndex: 'status',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n    }, {\n      key: 'enrollment',\n      title: '入学日期',\n      dataIndex: 'enrollment',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n      render: (value: Date, record) => {\n        return value?.toLocaleString();\n      }\n    }, {\n      key: 'openClass',\n      title: '开班日期',\n      dataIndex: 'classBaseInformation',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n      render: (text) => {\n        return text?.classBaseInformation?.openClass?.toLocaleString()\n      }\n    },{\n      key: 'birth',\n      title: '出生日期',\n      dataIndex: 'birth',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n      render: (value: Date, record) => {\n        return value?.toLocaleString();\n      }\n    }, {\n      key: 'remarks',\n      title: '备注',\n      dataIndex: 'remarks',\n      align: 'center',\n      ellipsis: true,\n      width: 240,\n    }, {\n      key: 'createTime',\n      title: '创建时间',\n      dataIndex: 'createTime',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n      render: (value, record) => {\n        return value?.toLocaleString();\n      }\n    }, {\n      key: 'lastTime',\n      title: '修改时间',\n      dataIndex: 'lastTime',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n      render: (value, record) => {\n        return value?.toLocaleString();\n      }\n    }, {\n      key: 'action',\n      title: '操作',\n      align: 'center',\n      ellipsis: true,\n      width: 220,\n      render: (value, record) => {\n        return (\n          <Space>\n            <Button type={'primary'} icon={<EditOutlined/>} onClick={(e) => {\n\n            }}>编辑</Button>\n            <Popconfirm title=\"是否要删除此学生？\" onConfirm={() => {\n            }}>\n              <Button type={'primary'} danger icon={<DeleteOutlined/>}>删除</Button>\n            </Popconfirm>\n          </Space>\n        )\n      }\n    },\n  ]\n\n\n  render() {\n    const {isHideForm, data, formSearch,pageSize} = this.props;\n    const {dispatch, } = this.props;\n    const searchItem: ProFormSearchItemArrays = [\n      {\n        label: '姓名',\n        name: 'classroomName',\n        children: <Input style={{width: '100%'}} placeholder={'请输入学生姓名'}/>, ...searchFormItemLayout\n      }, {\n        label: '班级', name: 'className', children: <Input placeholder={'请输入所在班级'}\n                                                         style={{width: '100%'}}/>, ...searchFormItemLayout\n      }, {\n        label: '学号', name: 'studentID', children: <Input style={{width: '100%'}}\n                                                     placeholder={'请输入学籍编号'}/>, ...searchFormItemLayout,\n      }, {\n        label: '性别', name: 'sex', children: <Select placeholder={'请选择性别'}\n                                                             style={{width: '160px'}}\n                                                             options={[{label: '男', value: 'male'}, {\n                                                               label: '女',\n                                                               value: 'female'\n                                                             }]}/>, ...searchFormItemLayout\n      },{\n        label: '是否毕业', name: 'isGraduate', children: <Select placeholder={'请选择是否毕业'}\n                                                    style={{width: '160px'}}\n                                                    options={[{label: '毕业', value: 'true'}, {\n                                                      label: '在校',\n                                                      value: 'false'\n                                                    }]}/>, ...searchFormItemLayout\n      },{\n        label: '入学日期',\n        name: 'enrollment',\n        children: <DatePicker.RangePicker style={{width: '100%'}}/>, ...searchFormItemLayout\n      },{\n        label: '开班日期',\n        name: 'openClass',\n        children: <DatePicker.RangePicker style={{width: '100%'}}/>, ...searchFormItemLayout\n      }, {\n        label: '身份证', name: 'cardID', children: <Input style={{width: '100%'}}\n                                                       placeholder={'请输入身份证'}/>, ...searchFormItemLayout\n      }, {\n        label: '班主任', name: 'leader', children: <Input style={{width: '100%'}}\n                                                    placeholder={'请输入班主任姓名'}/>, ...searchFormItemLayout\n      }, {\n        label: '电话', name: 'phone', children: <Input style={{width: '100%'}}\n                                                     placeholder={'请输入电话'}/>, ...searchFormItemLayout\n      }, {\n        label: '邮箱', name: 'mail', children: <Input style={{width: '100%'}}\n                                                    placeholder={'请输入邮箱'}/>, ...searchFormItemLayout\n      },\n\n    ];\n    return (<div>\n        <ProFormSearch initialValues={formSearch} childrenItem={searchItem} isHide={isHideForm} dispatch={dispatch}\n                       namespace={'PeopleEditStudent'} pageSize={pageSize}\n        />\n        <div style={{textAlign: 'right', padding: '8px 16px 0 16px'}}>\n          <Space><Button type={'primary'}>新建学生</Button><Button type={'primary'}>批量导入</Button></Space></div>\n        <div className={'site-custom-background'} style={{marginTop: 8}}>\n\n          <ProTable<StudentInformationType> title={'学生'} namespace={'PeopleEditStudent'} data={data}\n                                            columns={this.columns}  dispatch={dispatch}\n                                            pageSize={pageSize} formSearch={formSearch}\n                                            tableProps={{\n                                              expandable: {\n                                                rowExpandable: (record) => (!!record?.ics?.length && record?.ics?.length > 0),\n                                                expandedRowRender: (record, index) => {\n                                                  return <Table<ICInformation> bordered pagination={false}\n                                                                               columns={icColumns}\n                                                                               dataSource={record?.ics?.map(value => {\n                                                                                         return {\n                                                                                           ...value,\n                                                                                           key: value.id\n                                                                                         }\n                                                                                       })} style={{marginTop: 32,marginBottom: 32}}/>\n                                                }\n                                              },\n\n                                            }}/>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(\n    (\n        state: any) => {\n      return {\n        ...state[namespace],\n\n      }\n    })(Student);\n","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/PeopleEdit/models/administrator.ts",["291"],"\nimport {AdminInformationType,} from \"@/pages/eCard/data\";\nimport {ProFormFields} from \"@/components/ProTable/proFormSearch\";\nimport {Moment} from \"moment\";\nimport {getAdministrator} from \"@/pages/eCard/service\";\nimport {message} from \"antd\";\nimport {DateFormatString} from \"@/utils/time\";\nimport {setFormSearch, setSateProperty} from \"@/components/ProTable/reducers\";\nimport {ProStateType, ProTableModelType} from \"@/components/ProTable/data\";\n\n\nexport interface FormSearchSateType extends ProFormFields {\n  name?: string;\n  cardID?: string;\n  employeeID?: string;\n  departmentName?: string;\n  sex?: string;\n  grade?: number;\n  hire?: Moment[];\n  post?: string;\n  phone?: string;\n  mail?: string;\n  status?: string;\n}\n\nexport interface StateType extends ProStateType<AdminInformationType,FormSearchSateType>{\n\n}\ninterface ExtendModel {\n\n}\n\n\nconst Model: ProTableModelType<ExtendModel,StateType> = {\n  namespace: 'eCard/PeopleEdit/administrator',\n  state: {\n    data: {page: 0, pageSize: 10, totalRows: 0, totalPages: 0, data: []},\n    pageSize: 10,\n    isHideForm: true,\n    formSearch: {fuzzy: false, ASC: true}\n  },\n\n  effects: {\n    * querySubmit({payload}, {call, put}) {\n      const response = yield call(getAdministrator, {...payload,hire:payload?.hire?.map((value:Moment)=>{\n        return value.format(DateFormatString)\n        })});\n      yield put({type:'setSateProperty',payload:{dataIndex: 'data',value: {data:[]}}});\n      if (response && response.success && (response.resultBody != undefined)) {\n        // console.log(response)\n        yield put({\n          type: 'setSateProperty', payload: {\n            dataIndex: 'data', value: {\n              ...response.resultBody, data: response.resultBody?.data?.map((value:AdminInformationType) => {\n                return {...value, key: value.id};\n              })\n            }\n          }\n        })\n      }else {\n        message.error('查询管理员信息失败:' + response.msg, 2)\n      }\n    },\n\n  },\n  reducers: {\n    setFormSearch,\n    setSateProperty,\n  },\n};\n\nexport default Model;\n","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/PeopleEdit/models/student.ts",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/PeopleEdit/models/maintenance.ts",["292"],"import {MaintenanceInformationType, } from \"@/pages/eCard/data\";\nimport {ProFormFields} from \"@/components/ProTable/proFormSearch\";\nimport {ProStateType, ProTableModelType} from \"@/components/ProTable/data\";\nimport {getMaintenance} from \"@/pages/eCard/service\";\nimport {message} from \"antd\";\nimport {setFormSearch, setSateProperty} from \"@/components/ProTable/reducers\";\n\nexport interface FormSearchSateType extends ProFormFields {\n  name?: string;\n  cardID?: string;\n  departmentName?: string;\n  sex?: string;\n  phone?: string;\n  mail?: string;\n}\n\nexport interface StateType extends ProStateType<MaintenanceInformationType, FormSearchSateType> {\n\n}\n\ninterface ExtendModel {\n\n}\n\nconst Model: ProTableModelType<ExtendModel, StateType> = {\n  namespace: 'eCard/PeopleEdit/maintenance',\n  state: {\n    data: {page: 0, pageSize: 10, totalRows: 0, totalPages: 0, data: []},\n    pageSize: 10,\n    isHideForm: true,\n    formSearch: {fuzzy: false, ASC: true}\n  },\n\n  effects: {\n    * querySubmit({payload}, {call, put}) {\n      const response = yield call(getMaintenance, {\n        ...payload\n      });\n      yield put({type: 'setSateProperty', payload: {dataIndex: 'data', value: {data: []}}});\n      if (response && response.success && (response.resultBody != undefined)) {\n        yield put({\n          type: 'setSateProperty', payload: {\n            dataIndex: 'data', value: {\n              ...response.resultBody, data: response.resultBody?.data?.map((value: MaintenanceInformationType) => {\n                return {...value, key: value.id};\n              })\n            }\n          }\n        })\n      } else {\n        message.error('查询维护人员信息失败:' + response.msg, 2)\n      }\n    },\n  },\n\n  reducers: {\n    setFormSearch,\n    setSateProperty,\n  },\n};\n\nexport default Model;\n","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/PeopleEdit/models/teacher.ts",["293"],"import { TeacherInformationType} from \"@/pages/eCard/data\";\nimport {ProFormFields} from \"@/components/ProTable/proFormSearch\";\nimport {ProStateType, ProTableModelType} from \"@/components/ProTable/data\";\nimport {getTeacher} from \"@/pages/eCard/service\";\nimport {Moment} from \"moment\";\nimport {DateFormatString} from \"@/utils/time\";\nimport {message} from \"antd\";\nimport {setFormSearch, setSateProperty} from \"@/components/ProTable/reducers\";\n\nexport interface FormSearchSateType extends ProFormFields {\n  name?: string;\n  cardID?: string;\n  employeeID?: string;\n  departmentName?: string;\n  sex?: string;\n  hire?: Moment[];\n  phone?: string;\n  mail?: string;\n  status?: string;\n}\n\nexport interface StateType extends ProStateType<TeacherInformationType, FormSearchSateType> {\n\n}\n\ninterface ExtendModel {\n\n}\n\nconst Model: ProTableModelType<ExtendModel, StateType> = {\n  namespace: 'eCard/PeopleEdit/teacher',\n  state: {\n    data: {page: 0, pageSize: 10, totalRows: 0, totalPages: 0, data: []},\n    pageSize: 10,\n    isHideForm: true,\n    formSearch: {fuzzy: false, ASC: true}\n  },\n\n  effects: {\n    * querySubmit({payload}, {call, put}) {\n      const response = yield call(getTeacher, {\n        ...payload, hire: payload?.hire?.map((value: Moment) => {\n          return value.format(DateFormatString)\n        })\n      });\n      yield put({type: 'setSateProperty', payload: {dataIndex: 'data', value: {data: []}}});\n      if (response && response.success && (response.resultBody != undefined)) {\n        yield put({\n          type: 'setSateProperty', payload: {\n            dataIndex: 'data', value: {\n              ...response.resultBody, data: response.resultBody?.data?.map((value: TeacherInformationType) => {\n                return {...value, key: value.id};\n              })\n            }\n          }\n        })\n      } else {\n        message.error('查询教师信息失败:' + response.msg, 2)\n      }\n    },\n  },\n\n  reducers: {\n    setFormSearch,\n    setSateProperty,\n  },\n};\n\nexport default Model;\n","/Users/tanjie/WebstormProjects/create1/my-ts/src/utils/time.ts",[],"/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/PeopleEdit/models/temporary.ts",["294"],"import { TemporaryInformationType,} from \"@/pages/eCard/data\";\nimport {ProFormFields} from \"@/components/ProTable/proFormSearch\";\nimport {ProStateType, ProTableModelType} from \"@/components/ProTable/data\";\nimport {getTemporary} from \"@/pages/eCard/service\";\nimport {message} from \"antd\";\nimport {setFormSearch, setSateProperty} from \"@/components/ProTable/reducers\";\n\nexport interface FormSearchSateType extends ProFormFields {\n  name?: string;\n  cardID?: string;\n  departmentName?: string;\n  sex?: string;\n  phone?: string;\n  mail?: string;\n}\n\nexport interface StateType extends ProStateType<TemporaryInformationType, FormSearchSateType> {\n\n}\n\ninterface ExtendModel {\n\n}\n\nconst Model: ProTableModelType<ExtendModel, StateType> = {\n  namespace: 'eCard/PeopleEdit/temporary',\n  state: {\n    data: {page: 0, pageSize: 10, totalRows: 0, totalPages: 0, data: []},\n    pageSize: 10,\n    isHideForm: true,\n    formSearch: {fuzzy: false, ASC: true}\n  },\n\n  effects: {\n    * querySubmit({payload}, {call, put}) {\n      const response = yield call(getTemporary, {\n        ...payload\n      });\n      yield put({type: 'setSateProperty', payload: {dataIndex: 'data', value: {data: []}}});\n      if (response && response.success && response.resultBody ) {\n        yield put({\n          type: 'setSateProperty', payload: {\n            dataIndex: 'data', value: {\n              ...response.resultBody, data: response.resultBody?.data?.map((value: TemporaryInformationType) => {\n                return {...value, key: value.id};\n              })\n            }\n          }\n        })\n      } else {\n        message.error('查询临时人员信息失败:' + response.msg, 2)\n      }\n    },\n  },\n\n  reducers: {\n    setFormSearch,\n    setSateProperty,\n  },\n};\n\nexport default Model;\n","/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/log/models/SwipeDoor.ts",["295"],"/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/log/models/SwipeEquipment.ts",["296"],"/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/log/SwipeDoor.tsx",["297","298","299"],"/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/log/SwipeEquipment.tsx",["300","301","302","303"],"/Users/tanjie/WebstormProjects/create1/my-ts/src/pages/eCard/log/swipe.tsx",["304","305"],"import React from \"react\";\nimport {ColumnsType} from \"antd/es/table\";\nimport {ClassroomInformation, ICInformation, LogClassroomSwipe,} from \"@/pages/eCard/data\";\nimport {ICCardStatusPredefine, ICCategoryPredefine,} from \"@/pages/eCard/global\";\nimport { Input, Select,  DatePicker} from \"antd\";\n\nimport ProFormSearch, {ProFormFields, ProFormSearchItemArrays} from \"@/components/ProTable/proFormSearch\";\nimport ProTable from \"@/components/ProTable/proTable\";\n\n\nimport {Dispatch} from \"redux\";\n\nimport {ProStateType} from \"@/components/ProTable/data\";\nimport {Moment} from \"moment\";\nimport {ICCardStatusPredefineType, ICCategoryPredefineType} from \"../data\";\n\nconst searchFormItemLayout = {\n  labelCol: {\n    xs: {span: 24},\n    sm: {span: 8},\n  },\n  wrapperCol: {\n    xs: {span: 24},\n    sm: {span: 16},\n  },\n}\n\nexport interface FormSearchSateType extends ProFormFields {\n  name?: string;\n  cardID?: string;\n  department?: string;\n  phone?: string;\n  mail?: string;\n  physicalID?: string;\n  time?:Moment[];\n  cardNO?:string;\n  category?:string;\n  status?:string;\n  ack?:boolean;\n  identificationCode?:string;\n}\n\nexport interface StateType extends ProStateType<LogClassroomSwipe, FormSearchSateType> {\n\n}\n\nexport interface SwipeProps extends StateType{\n\n  dispatch: Dispatch;\n\n  name:string;\n}\n\nclass Swipe extends React.Component<SwipeProps, any> {\n\n  constructor(props: SwipeProps, context: any) {\n    super(props, context);\n  }\n\n  private columns: ColumnsType<LogClassroomSwipe> = [\n    {\n      key: 'classroomName',\n      title: '教室名称',\n      dataIndex: 'classroomInformation',\n      align: 'center',\n      ellipsis: true,\n      width: 180,\n      fixed: 'left',\n      render: ((v: ClassroomInformation) => {\n        return v?.campus&&((v?.campus as string) + v?.buildName + v?.floor + v?.name)\n      }),\n    },{\n      key: 'physicalID',\n      title: '物理卡号',\n      dataIndex: 'physicalID',\n      align: 'center',\n      ellipsis: true,\n      fixed: 'left',\n      width: 160,\n    }, {\n      key: 'ack',\n      title: '响应',\n      dataIndex: 'ack',\n      align: 'center',\n      ellipsis: true,\n      width: 65,\n      render: (value => {\n        return value!=undefined && (!!value ? '成功' : '失败')\n      }),\n    }, {\n      key: 'comment',\n      title: '回应消息',\n      dataIndex: 'comment',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n    },{\n      key: 'time',\n      title: '刷卡时间',\n      dataIndex: 'time',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n      render: (value) => {\n        return value?.toLocaleString();\n      }\n    },  {\n      key: 'classroomCategory',\n      title: '教室类别',\n      dataIndex: 'classroomInformation',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n      render: ((v: ClassroomInformation) => {\n        return v?.category\n      }),\n    }, {\n      key: 'cardNO',\n      title: '卡面编号',\n      dataIndex: 'icInformation',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n      render: (value: ICInformation) => {\n        return value?.cardNO\n      }\n    }, {\n      key: 'cardCategory',\n      title: 'IC卡类别',\n      dataIndex: 'icInformation',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n      render: (value: ICInformation) => {\n        return value?.category&&ICCategoryPredefine[value?.category as ICCategoryPredefineType]\n      }\n    }, {\n      key: 'cardStatus',\n      title: '卡片状态',\n      dataIndex: 'icInformation',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n      render: (value: ICInformation) => {\n        return value?.status&&ICCardStatusPredefine[value?.status as ICCardStatusPredefineType]\n      }\n    }, {\n      key: 'personName',\n      title: '持卡人姓名',\n      dataIndex: 'icInformation',\n      align: 'center',\n      ellipsis: true,\n      width: 120,\n      render: (value: ICInformation) => {\n        return value?.personBaseInformation?.name\n      }\n    }, {\n      key: 'personDepartment',\n      title: '持卡人单位',\n      dataIndex: 'icInformation',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n      render: (value: ICInformation) => {\n        return value?.personBaseInformation?.department\n      }\n    }, {\n      key: 'personIdentificationCode',\n      title: '持卡人学工号',\n      dataIndex: 'icInformation',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n      render: (value: ICInformation) => {\n        return value?.personBaseInformation?.identificationCode\n      }\n    }, {\n      key: 'personCardID',\n      title: '持卡人身份证',\n      dataIndex: 'icInformation',\n      align: 'center',\n      ellipsis: true,\n      width: 160,\n      render: (value: ICInformation) => {\n        return value?.personBaseInformation?.cardID\n      }\n    }, {\n      key: 'personPhone',\n      title: '持卡人电话',\n      dataIndex: 'icInformation',\n      align: 'center',\n      ellipsis: true,\n      width: 140,\n      render: (value: ICInformation) => {\n        return value?.personBaseInformation?.phone\n      }\n    }, {\n      key: 'departmentMail',\n      title: '持卡人邮箱',\n      dataIndex: 'icInformation',\n      align: 'center',\n      ellipsis: true,\n      width: 240,\n      render: (value: ICInformation) => {\n        return value?.personBaseInformation?.mail\n      }\n    },\n  ]\n\n  render() {\n    const {isHideForm, data, formSearch, pageSize} = this.props;\n    const {dispatch, name} = this.props;\n    const searchItem: ProFormSearchItemArrays = [\n      {\n        label: 'IC卡物理卡号',\n        name: 'physicalID',\n        children: <Input style={{width: '100%'}} placeholder={'请输入IC卡物理卡号'}/>, ...searchFormItemLayout\n      }, {\n        label: 'IC卡卡面编号',\n        name: 'cardNO',\n        children: <Input style={{width: '100%'}} placeholder={'请输入IC卡卡面编号'}/>, ...searchFormItemLayout\n      }, {\n        label: '持卡人姓名',\n        name: 'name',\n        children: <Input style={{width: '100%'}} placeholder={'请输入持卡人人员姓名'}/>, ...searchFormItemLayout\n      }, {\n        label: 'IC卡类别', name: 'category', children: <Select placeholder={'请选择IC卡类别'}\n                                                            style={{width: '160px'}}\n                                                            options={Object.keys(ICCategoryPredefine).map(value => {\n                                                              return {\n                                                                label: ICCategoryPredefine[value as ICCategoryPredefineType],\n                                                                value: value,\n                                                              }\n                                                            })}/>, ...searchFormItemLayout\n      }, {\n        label: 'IC卡状态', name: 'status', children: <Select placeholder={'请选择IC卡状态'}\n                                                            style={{width: '160px'}}\n                                                            options={Object.keys(ICCardStatusPredefine).map(value => {\n                                                              return {\n                                                                label: ICCardStatusPredefine[value as ICCardStatusPredefineType],\n                                                                value: value,\n                                                              }\n                                                            })}/>, ...searchFormItemLayout\n      }, {\n        label: '刷卡时间',\n        name: 'time',\n        children: <DatePicker.RangePicker\n          showTime={{format: 'HH:mm'}}\n          format=\"YYYY-MM-DD HH:mm:ss\"\n          onOk={(value) => {\n            console.log(value)\n          }}\n        />, ...searchFormItemLayout\n      }, {\n        label: '响应',\n        name: 'ack',\n        children: <Select placeholder={'请选择响应'}\n                          style={{width: '120px'}}\n                          options={[{label: '成功', value: 'true'}, {\n                            label: '失败',\n                            value: 'false'\n                          }]}/>, ...searchFormItemLayout\n      }, {\n        label: '持卡人工作单位', name: 'department', children: <Input placeholder={'请输入持卡人工作单位'}\n                                                               style={{width: '100%'}}/>, ...searchFormItemLayout\n      }, {\n        label: '持卡人学工号', name: 'identificationCode', children: <Input style={{width: '100%'}}\n                                                                      placeholder={'请输入持卡人学工号'}/>, ...searchFormItemLayout\n      }, {\n        label: '持卡人身份证', name: 'cardID', children: <Input style={{width: '100%'}}\n                                                          placeholder={'请输入持卡人身份证'}/>, ...searchFormItemLayout\n      }, {\n        label: '持卡人电话', name: 'phone', children: <Input style={{width: '100%'}}\n                                                        placeholder={'请输入持卡人电话'}/>, ...searchFormItemLayout\n      }, {\n        label: '持卡人邮箱', name: 'mail', children: <Input style={{width: '100%'}}\n                                                       placeholder={'请输入持卡人邮箱'}/>, ...searchFormItemLayout\n      },\n\n    ];\n    return (<div>\n      <ProFormSearch initialValues={formSearch} childrenItem={searchItem} isHide={isHideForm}\n                     namespace={name} dispatch={dispatch} pageSize={pageSize}/>\n      <div className={'site-custom-background'} style={{marginTop: 8}}>\n        <ProTable<LogClassroomSwipe> title={'刷卡记录'} namespace={name} data={data}\n                                     columns={this.columns} dispatch={dispatch}\n                                     pageSize={pageSize} formSearch={formSearch}\n        />\n      </div>\n    </div>);\n  }\n}\n\nexport default Swipe;\n",{"ruleId":"306","replacedBy":"307"},{"ruleId":"308","replacedBy":"309"},{"ruleId":"306","replacedBy":"310"},{"ruleId":"308","replacedBy":"311"},{"ruleId":"312","severity":1,"message":"313","line":33,"column":11,"nodeType":"314","messageId":"315","endLine":33,"endColumn":13},{"ruleId":"306","replacedBy":"316"},{"ruleId":"308","replacedBy":"317"},{"ruleId":"318","severity":1,"message":"319","line":1,"column":31,"nodeType":"320","messageId":"321","endLine":1,"endColumn":37},{"ruleId":"318","severity":1,"message":"322","line":1,"column":39,"nodeType":"320","messageId":"321","endLine":1,"endColumn":44},{"ruleId":"318","severity":1,"message":"323","line":1,"column":46,"nodeType":"320","messageId":"321","endLine":1,"endColumn":53},{"ruleId":"324","severity":1,"message":"325","line":111,"column":6,"nodeType":"326","endLine":111,"endColumn":8,"suggestions":"327"},{"ruleId":"318","severity":1,"message":"328","line":32,"column":7,"nodeType":"320","messageId":"321","endLine":32,"endColumn":20},{"ruleId":"318","severity":1,"message":"329","line":33,"column":7,"nodeType":"320","messageId":"321","endLine":33,"endColumn":23},{"ruleId":"330","severity":1,"message":"331","line":27,"column":3,"nodeType":"332","messageId":"333","endLine":29,"endColumn":4},{"ruleId":"312","severity":1,"message":"334","line":45,"column":64,"nodeType":"314","messageId":"315","endLine":45,"endColumn":66},{"ruleId":"335","severity":1,"message":"336","line":87,"column":94,"nodeType":"314","messageId":"337","endLine":87,"endColumn":95},{"ruleId":"335","severity":1,"message":"336","line":98,"column":97,"nodeType":"314","messageId":"337","endLine":98,"endColumn":98},{"ruleId":"318","severity":1,"message":"338","line":4,"column":7,"nodeType":"320","messageId":"321","endLine":4,"endColumn":18},{"ruleId":"318","severity":1,"message":"339","line":1,"column":17,"nodeType":"320","messageId":"321","endLine":1,"endColumn":20},{"ruleId":"318","severity":1,"message":"340","line":1,"column":22,"nodeType":"320","messageId":"321","endLine":1,"endColumn":25},{"ruleId":"318","severity":1,"message":"328","line":22,"column":7,"nodeType":"320","messageId":"321","endLine":22,"endColumn":20},{"ruleId":"318","severity":1,"message":"329","line":23,"column":7,"nodeType":"320","messageId":"321","endLine":23,"endColumn":23},{"ruleId":"312","severity":1,"message":"334","line":471,"column":81,"nodeType":"314","messageId":"315","endLine":471,"endColumn":83},{"ruleId":"312","severity":1,"message":"334","line":475,"column":62,"nodeType":"314","messageId":"315","endLine":475,"endColumn":64},{"ruleId":"312","severity":1,"message":"334","line":478,"column":92,"nodeType":"314","messageId":"315","endLine":478,"endColumn":94},{"ruleId":"312","severity":1,"message":"334","line":632,"column":81,"nodeType":"314","messageId":"315","endLine":632,"endColumn":83},{"ruleId":"312","severity":1,"message":"334","line":641,"column":62,"nodeType":"314","messageId":"315","endLine":641,"endColumn":64},{"ruleId":"312","severity":1,"message":"334","line":644,"column":92,"nodeType":"314","messageId":"315","endLine":644,"endColumn":94},{"ruleId":"318","severity":1,"message":"328","line":29,"column":7,"nodeType":"320","messageId":"321","endLine":29,"endColumn":20},{"ruleId":"318","severity":1,"message":"329","line":30,"column":7,"nodeType":"320","messageId":"321","endLine":30,"endColumn":23},{"ruleId":"312","severity":1,"message":"334","line":323,"column":79,"nodeType":"314","messageId":"315","endLine":323,"endColumn":81},{"ruleId":"312","severity":1,"message":"334","line":327,"column":60,"nodeType":"314","messageId":"315","endLine":327,"endColumn":62},{"ruleId":"312","severity":1,"message":"334","line":330,"column":90,"nodeType":"314","messageId":"315","endLine":330,"endColumn":92},{"ruleId":"318","severity":1,"message":"328","line":41,"column":7,"nodeType":"320","messageId":"321","endLine":41,"endColumn":20},{"ruleId":"318","severity":1,"message":"329","line":42,"column":7,"nodeType":"320","messageId":"321","endLine":42,"endColumn":23},{"ruleId":"318","severity":1,"message":"323","line":1,"column":17,"nodeType":"320","messageId":"321","endLine":1,"endColumn":24},{"ruleId":"312","severity":1,"message":"334","line":51,"column":64,"nodeType":"314","messageId":"315","endLine":51,"endColumn":66},{"ruleId":"312","severity":1,"message":"334","line":61,"column":64,"nodeType":"314","messageId":"315","endLine":61,"endColumn":66},{"ruleId":"318","severity":1,"message":"328","line":34,"column":7,"nodeType":"320","messageId":"321","endLine":34,"endColumn":20},{"ruleId":"318","severity":1,"message":"329","line":35,"column":7,"nodeType":"320","messageId":"321","endLine":35,"endColumn":23},{"ruleId":"330","severity":1,"message":"331","line":39,"column":3,"nodeType":"332","messageId":"333","endLine":44,"endColumn":4},{"ruleId":"318","severity":1,"message":"328","line":35,"column":7,"nodeType":"320","messageId":"321","endLine":35,"endColumn":20},{"ruleId":"318","severity":1,"message":"329","line":36,"column":7,"nodeType":"320","messageId":"321","endLine":36,"endColumn":23},{"ruleId":"330","severity":1,"message":"331","line":40,"column":3,"nodeType":"332","messageId":"333","endLine":42,"endColumn":4},{"ruleId":"318","severity":1,"message":"328","line":35,"column":7,"nodeType":"320","messageId":"321","endLine":35,"endColumn":20},{"ruleId":"318","severity":1,"message":"329","line":36,"column":7,"nodeType":"320","messageId":"321","endLine":36,"endColumn":23},{"ruleId":"330","severity":1,"message":"331","line":40,"column":3,"nodeType":"332","messageId":"333","endLine":42,"endColumn":4},{"ruleId":"318","severity":1,"message":"328","line":36,"column":7,"nodeType":"320","messageId":"321","endLine":36,"endColumn":20},{"ruleId":"318","severity":1,"message":"329","line":37,"column":7,"nodeType":"320","messageId":"321","endLine":37,"endColumn":23},{"ruleId":"318","severity":1,"message":"328","line":39,"column":7,"nodeType":"320","messageId":"321","endLine":39,"endColumn":20},{"ruleId":"318","severity":1,"message":"329","line":40,"column":7,"nodeType":"320","messageId":"321","endLine":40,"endColumn":23},{"ruleId":"330","severity":1,"message":"331","line":44,"column":3,"nodeType":"332","messageId":"333","endLine":46,"endColumn":4},{"ruleId":"312","severity":1,"message":"334","line":49,"column":64,"nodeType":"314","messageId":"315","endLine":49,"endColumn":66},{"ruleId":"312","severity":1,"message":"334","line":40,"column":64,"nodeType":"314","messageId":"315","endLine":40,"endColumn":66},{"ruleId":"312","severity":1,"message":"334","line":47,"column":64,"nodeType":"314","messageId":"315","endLine":47,"endColumn":66},{"ruleId":"312","severity":1,"message":"334","line":40,"column":64,"nodeType":"314","messageId":"315","endLine":40,"endColumn":66},{"ruleId":"312","severity":1,"message":"334","line":31,"column":64,"nodeType":"314","messageId":"315","endLine":31,"endColumn":66},{"ruleId":"312","severity":1,"message":"334","line":32,"column":64,"nodeType":"314","messageId":"315","endLine":32,"endColumn":66},{"ruleId":"318","severity":1,"message":"328","line":7,"column":7,"nodeType":"320","messageId":"321","endLine":7,"endColumn":20},{"ruleId":"318","severity":1,"message":"329","line":8,"column":7,"nodeType":"320","messageId":"321","endLine":8,"endColumn":23},{"ruleId":"330","severity":1,"message":"331","line":12,"column":3,"nodeType":"332","messageId":"333","endLine":14,"endColumn":4},{"ruleId":"318","severity":1,"message":"341","line":2,"column":16,"nodeType":"320","messageId":"321","endLine":2,"endColumn":25},{"ruleId":"318","severity":1,"message":"328","line":7,"column":7,"nodeType":"320","messageId":"321","endLine":7,"endColumn":20},{"ruleId":"318","severity":1,"message":"329","line":8,"column":7,"nodeType":"320","messageId":"321","endLine":8,"endColumn":23},{"ruleId":"330","severity":1,"message":"331","line":12,"column":3,"nodeType":"332","messageId":"333","endLine":14,"endColumn":4},{"ruleId":"330","severity":1,"message":"331","line":57,"column":3,"nodeType":"332","messageId":"333","endLine":59,"endColumn":4},{"ruleId":"312","severity":1,"message":"334","line":89,"column":21,"nodeType":"314","messageId":"315","endLine":89,"endColumn":23},"no-native-reassign",["342"],"no-negated-in-lhs",["343"],["342"],["343"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["342"],["343"],"@typescript-eslint/no-unused-vars","'Effect' is defined but never used.","Identifier","unusedVar","'Model' is defined but never used.","'Reducer' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'gridRowsMax' and 'refresh'. Either include them or remove the dependency array.","ArrayExpression",["344"],"'title' is assigned a value but never used.","'subTitle' is assigned a value but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","Expected '!==' and instead saw '!='.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'codeMessage' is assigned a value but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'StateType' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"345","fix":"346"},"Update the dependencies array to be: [gridRowsMax, refresh]",{"range":"347","text":"348"},[2059,2061],"[gridRowsMax, refresh]"]